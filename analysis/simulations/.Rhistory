"condition.3." = "",
"condition.4." = "",
"condition.5." = "",
"condition.6." = "",
"tree50." = "",
"tree100." = "",
"tree150." = "",
"tree200." = "",
"tree250." = "",
"rr." = "",
".csv" = "")))
Sigtab$FissionSignificance[i] <- sum(tab$FissionPassZero) / 100
Sigtab$FusionSignificance[i] <- sum(tab$FusionPassZero) / 100
Sigtab$MeanRateSignificance[i] <- sum(tab$MeanRatepassZero) / 100
}
# re order ptab by tip number
Sigtab <- Sigtab[order(Sigtab$ntip),]
# keep onlu SigTab
rm(list = ls()[-c(which(ls() == "Sigtab"))])
#### calculate power ####
# get the list of files
files <- dir()
# only keep files that we want
files <- files[grep("post.burnin", files)]
files <- files[grep(paste("condition.2", sep = ""), files)]
# container to store p values
Ptab <- as.data.frame(matrix(data = NA,
nrow = 15,
ncol = 6))
colnames(Ptab) <- c("condition", "ntip","rr", "FissionSignificance", "FusionSignificance", "MeanRateSignificance")
# this will be used to get the post burnin from each MCMC run
pb.seq <- seq(from = 1, to = 5000, by = 50)
# read in data
for(i in 1:length(files)){
dat <- read.csv(files[i])
# make tables to hold rates in each simulation
tab <- as.data.frame(matrix(data = NA, nrow = 100, ncol = 3))
# label columns
colnames(tab) <- c("FissionPassZero", "FusionPassZero", "MeanRatepassZero")
for(j in 1:100){
# fission
# calculate HPD interval
HPD.fis <- HPDinterval(as.mcmc(dat$asc2[pb.seq[j]:(pb.seq[j] + 49)] - dat$asc1[pb.seq[j]:(pb.seq[j] + 49)]))
if(HPD.fis[1] < 0 & HPD.fis[2] > 0){
tab$FissionPassZero[j] <- 0
}else{
tab$FissionPassZero[j] <- 1
}
# fusion
# calculate HPD interval
HPD.fus <- HPDinterval(as.mcmc(dat$desc2[pb.seq[j]:(pb.seq[j] + 49)] - dat$desc1[pb.seq[j]:(pb.seq[j] + 49)]))
if(HPD.fus[1] < 0 & HPD.fus[2] > 0){
tab$FusionPassZero[j] <- 0
}else{
tab$FusionPassZero[j] <- 1
}
# combined
# calculate HPD interval
HPD.comb <- HPDinterval(as.mcmc((dat$asc2[pb.seq[j]:(pb.seq[j] + 49)] + dat$desc2[pb.seq[j]:(pb.seq[j] + 49)])/2  - (dat$asc1[pb.seq[j]:(pb.seq[j] + 49)] + dat$desc1[pb.seq[j]:(pb.seq[j] + 49)])/2))
if(HPD.comb[1] < 0 & HPD.comb[2] > 0){
tab$MeanRatepassZero[j] <- 0
}else{
tab$MeanRatepassZero[j] <- 1
}
}
Ptab$condition[i] <- as.numeric(str_replace_all(files[i], c("post.burnin." = "",
"tree50." = "",
"tree100." = "",
"tree150." = "",
"tree200." = "",
"tree250." = "",
"condition." = "",
".rr.2.csv" = "",
".rr.5.csv" = "",
".rr.10.csv" = "")))
Ptab$ntip[i] <- as.numeric(str_replace_all(files[i], c("post.burnin." = "",
"condition.1." = "",
"condition.2." = "",
"condition.3." = "",
"condition.4." = "",
"condition.5." = "",
"condition.6." = "",
"tree" = "",
".rr.2.csv" = "",
".rr.5.csv" = "",
".rr.10.csv" = "")))
Ptab$rr[i] <- as.numeric(str_replace_all(files[i], c("post.burnin." = "",
"condition.1." = "",
"condition.2." = "",
"condition.3." = "",
"condition.4." = "",
"condition.5." = "",
"condition.6." = "",
"tree50." = "",
"tree100." = "",
"tree150." = "",
"tree200." = "",
"tree250." = "",
"rr." = "",
".csv" = "")))
Ptab$FissionSignificance[i] <- sum(tab$FissionPassZero) / 100
Ptab$FusionSignificance[i] <- sum(tab$FusionPassZero) / 100
Ptab$MeanRateSignificance[i] <- sum(tab$MeanRatepassZero) / 100
}
# re order ptab by tip number
Ptab <- Ptab[order(Ptab$ntip),]
# keep onlu SigTab and Ptab
rm(list = ls()[-c(which(ls() %in% c("Sigtab", "Ptab")))])
View(Ptab)
par(mfrow = c(2,3))
#set colours and point types
col <- viridis::viridis(3, alpha = 0.5, end = 0.8)
## Type I error rate Fission
plot(x = NULL,
y = NULL,
xlim = c(50,250),
ylim = c(0,0.1),
ylab = "Type I error rate",
xlab = "Number of tips",
main = "Fission")
for(i in 1:3){
# plot condition 2
lines(x = Sigtab$ntip[Sigtab$rr == sort(unique(Sigtab$rr))[i]],
y = Sigtab$FissionSignificance[Sigtab$rr == sort(unique(Sigtab$rr))[i]],
pch = 16,
type = "o", lwd = 2,
col = col[i])
}
# add 0.05 p value cut off
abline(h = 0.05, col = "red", lty = 2)
# add legend
legend("topleft",inset=.02,
legend=c("2",
"5",
"10"),
col=col,
lty=1,
cex=1,
lwd = 2,title = "Rates ratio")
## Type I error rate Fusion
plot(x = NULL,
y = NULL,
xlim = c(50,250),
ylim = c(0,0.1),
ylab = "Type I error rate",
xlab = "Number of tips",
main = "Fusion")
for(i in 1:3){
# plot condition 2
lines(x = Sigtab$ntip[Sigtab$rr == sort(unique(Sigtab$rr))[i]],
y = Sigtab$FusionSignificance[Sigtab$rr == sort(unique(Sigtab$rr))[i]],
pch = 16,
type = "o", lwd = 2,
col = col[i])
}
# add 0.05 p value cut off
abline(h = 0.05, col = "red", lty = 2)
## Type I error rate MeanRateCombined
plot(x = NULL,
y = NULL,
xlim = c(50,250),
ylim = c(0,0.1),
ylab = "Type I error rate",
xlab = "Number of tips",
main = "Combination")
for(i in 1:3){
# plot condition 2
lines(x = Sigtab$ntip[Sigtab$rr == sort(unique(Sigtab$rr))[i]],
y = Sigtab$MeanRateSignificance[Sigtab$rr == sort(unique(Sigtab$rr))[i]],
pch = 16,
type = "o", lwd = 2,
col = col[i])
}
# add legend
legend("topleft",inset=.02,
legend=c("2",
"5",
"10"),
col=col,
lty=1,
cex=1,
lwd = 2,title = "Rates ratio")
# plot
{
par(mfrow = c(2,3))
#set colours and point types
col <- viridis::viridis(3, alpha = 0.5, end = 0.8)
## Type I error rate Fission
plot(x = NULL,
y = NULL,
xlim = c(50,250),
ylim = c(0,0.1),
ylab = "Type I error rate",
xlab = "Number of tips",
main = "Fission")
for(i in 1:3){
# plot condition 2
lines(x = Sigtab$ntip[Sigtab$rr == sort(unique(Sigtab$rr))[i]],
y = Sigtab$FissionSignificance[Sigtab$rr == sort(unique(Sigtab$rr))[i]],
pch = 16,
type = "o", lwd = 2,
col = col[i])
}
# add 0.05 p value cut off
abline(h = 0.05, col = "red", lty = 2)
## Type I error rate Fusion
plot(x = NULL,
y = NULL,
xlim = c(50,250),
ylim = c(0,0.1),
ylab = "Type I error rate",
xlab = "Number of tips",
main = "Fusion")
for(i in 1:3){
# plot condition 2
lines(x = Sigtab$ntip[Sigtab$rr == sort(unique(Sigtab$rr))[i]],
y = Sigtab$FusionSignificance[Sigtab$rr == sort(unique(Sigtab$rr))[i]],
pch = 16,
type = "o", lwd = 2,
col = col[i])
}
# add 0.05 p value cut off
abline(h = 0.05, col = "red", lty = 2)
## Type I error rate MeanRateCombined
plot(x = NULL,
y = NULL,
xlim = c(50,250),
ylim = c(0,0.1),
ylab = "Type I error rate",
xlab = "Number of tips",
main = "Combination")
for(i in 1:3){
# plot condition 2
lines(x = Sigtab$ntip[Sigtab$rr == sort(unique(Sigtab$rr))[i]],
y = Sigtab$MeanRateSignificance[Sigtab$rr == sort(unique(Sigtab$rr))[i]],
pch = 16,
type = "o", lwd = 2,
col = col[i])
}
# add legend
legend("topleft",inset=.02,
legend=c("2",
"5",
"10"),
col=col,
lty=1,
cex=1,
lwd = 2,title = "Rates ratio")
# add 0.05 p value cut off
abline(h = 0.05, col = "red", lty = 2)
## Type II error rate fission
plot(x = NULL,
y = NULL,
xlim = c(50,250),
ylim = c(0,1),
ylab = "Type II error rate",
xlab = "Number of tips")
for(i in 1:3){
# plot condition 2
lines(x = Ptab$ntip[Ptab$rr == sort(unique(Ptab$rr))[i]],
y = Ptab$FissionSignificance[Ptab$rr == sort(unique(Ptab$rr))[i]],
pch = 16,
type = "o", lwd = 2,
col = col[i])
}
## Type II error rate fusion
plot(x = NULL,
y = NULL,
xlim = c(50,250),
ylim = c(0,1),
ylab = "Type II error rate",
xlab = "Number of tips")
for(i in 1:3){
# plot condition 2
lines(x = Ptab$ntip[Ptab$rr == sort(unique(Ptab$rr))[i]],
y = Ptab$FusionSignificance[Ptab$rr == sort(unique(Ptab$rr))[i]],
pch = 16,
type = "o", lwd = 2,
col = col[i])
}
## Type II error rate MeanRateCombined
plot(x = NULL,
y = NULL,
xlim = c(50,250),
ylim = c(0,1),
ylab = "Type II error rate",
xlab = "Number of tips")
for(i in 1:3){
# plot condition 2
lines(x = Ptab$ntip[Ptab$rr == sort(unique(Ptab$rr))[i]],
y = Ptab$MeanRateSignificance[Ptab$rr == sort(unique(Ptab$rr))[i]],
pch = 16,
type = "o", lwd = 2,
col = col[i])
}
}
?legend
i <- ii <- 1
# load libraries
library(chromePlus)
library(diversitree)
library(phytools)
library(doSNOW)
# set file pars
condition <- 1
rr <- 2
ntip <- 50
# load data name
load.name <- paste("simulate.data.rr-",
rr,
".RData",
sep = "")
# read in data
load(load.name)
# read rates
rates.name <- paste("post.burnin.condition.",
condition,
".tree",
ntip,
".rr.",
rr,
".csv",
sep = "")
dat <- read.csv(rates.name, as.is = T)
# container to hold results
results <- results.complete <- vector(mode = "list", length = 100)
# define parameters for MCMC
iter.temp <- 20
iter <- 100
prior <- make.prior.exponential(r = .5)
# get tree
tree <- NULL
tree <- trees[[1]][[i]]
emp.bin.state <- NULL
emp.bin.state <- bin.traits.1[[1]][[i]]
### simulate binary trait data ###
# get the initial transition matrix
Q <- matrix(data = 0,
nrow = 2,
ncol = 2)
# colnames and rownames Q
colnames(Q) <- rownames(Q) <- c(0,1)
# Fill in Q
Q[1,2] <- mean(dat$tran12[((i*50) - 49):(1*50)])
Q[2,1] <- mean(dat$tran21[((i*50) - 49):(1*50)])
diag(Q) <- -rowSums(Q)
# get the ancestral state of the binary character
root <- fitMk(tree = tree,
x = emp.bin.state,
fixedQ = Q,
pi = "fitzjohn")
# simulate binary traits
sim.bin <- NULL
sim.bin <- sim.character(tree = tree,
pars = Q,
model = "mkn",
x0 = as.numeric(sample(names(root$pi),
1,
prob = root$pi))+1)
# change simulated binary characters back to zeros and ones
sim.bin[sim.bin == 1] <- 0
sim.bin[sim.bin == 2] <- 1
# make the initial data frame
MCMC.dat <- NULL
MCMC.dat <-  data.frame(species = tree$tip.label,
Chroms = chrom.traits.1[[1]][[i]],
bin = sim.bin,
stringsAsFactors = F,
row.names = NULL)
# get the range of chromosome number
rng <- NULL
rng <- c(range(MCMC.dat$Chroms, na.rm = T)[1] - 1,
range(MCMC.dat$Chroms, na.rm = T)[2] + 1)
# convert the data frame to diversitree usable format
chrom.mat <- NULL
chrom.mat <- datatoMatrix(x = MCMC.dat,
range = rng,
hyper = T)
# make the likelihood function
lik <- NULL
lik <- make.mkn(tree = tree,
states = chrom.mat,
k = ncol(chrom.mat),
strict = F,
control = list(method="ode"))
# constrain the likelihood function
con.lik <- NULL
con.lik <- constrainMkn(data = chrom.mat,
lik = lik,
hyper = T,
polyploidy = F,
verbose = F,
oneway = F,
constrain = list(drop.poly=T,
drop.demi=T))
# run the initial MCMC to get parameter values for w
temp <- NULL
?mcmc
temp <- mcmc(lik = con.lik,
x.init = runif(min=0, max=1,
n=length(argnames(con.lik))),
prior = prior,
nsteps = iter.temp,
w = 1,
lower = rep(0,length(argnames(con.lik))),
save.file = "condition_1_ntip_50_tree_1_sim_1_.RData")
temp <- mcmc(lik = con.lik,
x.init = runif(min=0, max=1,
n=length(argnames(con.lik))),
prior = prior,
nsteps = iter.temp,
w = 1,
lower = rep(0,length(argnames(con.lik))),
save.file = "condition_1_ntip_50_tree_1_sim_1_.RData",
save.every = 1)
temp <- mcmc(lik = con.lik,
x.init = runif(min=0, max=1,
n=length(argnames(con.lik))),
prior = prior,
nsteps = iter.temp,
w = 1,
lower = rep(0,length(argnames(con.lik))),
save.file = "condition_1_ntip_50_tree_1_sim_1_.rds")
temp <- mcmc(lik = con.lik,
x.init = runif(min=0, max=1,
n=length(argnames(con.lik))),
prior = prior,
nsteps = iter.temp,
w = 1,
lower = rep(0,length(argnames(con.lik))),
save.file = "condition_1_ntip_50_tree_1_sim_1_.rds",
save.every = 1)
temp <- mcmc(lik = con.lik,
x.init = runif(min=0, max=1,
n=length(argnames(con.lik))),
prior = prior,
nsteps = iter.temp,
w = 1,
lower = rep(0,length(argnames(con.lik))),
save.file = "condition_1_ntip_50_tree_1_sim_1_.csv",
save.every = 1)
paste("Null.dist.condition.",
condition,
".ntip.",
ntip,
".tree.",
i,
".sim.",
ii,
".csv",
sep = "")
paste("Null.dist.condition.",
condition,
".ntip.",
ntip,
".tree.",
i,
".sim.",
ii,
".rr-",
rr,
".csv",
sep = "")
dir.exists("results")
dir.exists("results/nulDist/Ntip50/Condition1")
names(tree)
names(trees)
names(trees)[i] == 50
dir.name <- paste("results/nulDist/Ntip",
names(trees)[i],
"/Condition1")
dir.name <- paste("results/nulDist/Ntip",
names(trees)[i],
"/Condition1",
sep = "")
dir.exists(dir.name)
dir.create(dir.name, recursive = T)
dir.name <- paste("results/nulDist/Ntip",
names(trees)[i],
"/Condition2",
sep = "")
dir.create(dir.name, recursive = T)
i <- ii <- iii <- iiii 1
i <- ii <- iii <- iiii <-  1
paste("Null.dist.condition.",
condition,
".ntip.",
ntip[ii],
".tree.",
iii,
".sim.",
iiii,
".rr-",
rr,
".csv",
sep = "")
condition
save.file.name <- paste("Null.dist.condition.",
condition,
".ntip.",
ntip[ii],
".tree.",
iii,
".sim.",
iiii,
".rr-",
rr,
".csv",
sep = "")
paste(dir.name,"/",save.file.name)
paste(dir.name,"/",save.file.name, sep = "")
rr <- c(2,5,10)
