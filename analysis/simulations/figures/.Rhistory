install.packages("optparse")
# Read in the arguments
library("optparse")
option_list = list(
make_option(c("-p", "--prefix"), type="character", default=NULL,
help="prefix name (with path if not in the current directory)", metavar="character"),
make_option(c("-i", "--infofile"), type="character", default=NULL,
help="info text file containing for each individual the population/species information", metavar="character"),
make_option(c("-k", "--maxK"), type="integer", default=NULL,
help="maximum K value", metavar="integer"),
make_option(c("-m", "--minK"), type="integer", default=2,
help="minimum K value", metavar="integer"),
make_option(c("-l", "--populations"), type="character", default=NULL,
help="comma-separated list of populations/species in the order to be plotted", metavar="character"),
make_option(c("-o", "--outPrefix"), type="character", default="default",
help="output prefix (default: name provided with prefix)", metavar="character")
)
opt_parser = OptionParser(option_list=option_list)
opt = parse_args(opt_parser)
# Check that all required arguments are provided
if (is.null(opt$prefix)){
print_help(opt_parser)
stop("Please provide the prefix", call.=FALSE)
}else if (is.null(opt$infofile)){
print_help(opt_parser)
stop("Please provide the info file", call.=FALSE)
}else if (is.null(opt$maxK)){
print_help(opt_parser)
stop("Please provide the maximum K value to plot", call.=FALSE)
}else if (is.null(opt$populations)){
print_help(opt_parser)
stop("Please provide a comma-separated list of populations/species", call.=FALSE)
}
opt$prefix <- "gloriosa_PCA_dp_5"
# Check that all required arguments are provided
if (is.null(opt$prefix)){
print_help(opt_parser)
stop("Please provide the prefix", call.=FALSE)
}else if (is.null(opt$infofile)){
print_help(opt_parser)
stop("Please provide the info file", call.=FALSE)
}else if (is.null(opt$maxK)){
print_help(opt_parser)
stop("Please provide the maximum K value to plot", call.=FALSE)
}else if (is.null(opt$populations)){
print_help(opt_parser)
stop("Please provide a comma-separated list of populations/species", call.=FALSE)
}
opt$minK
install.packages("diversitree")
install.packages("diversitree")
install.packages("diversitree")
clear
ls()
install.packages("diversitree")
install.packages("devtools")
setwd("~/Desktop/Terrence/github/lepidoptera/analysis/simulations/figures")
# Terrence Sylvester
# get file names and make data table to store results
files <- dir("../results/empP-MCMC/tree.67/")
dat <- as.data.frame(matrix(data = NA, nrow = length(files),ncol = 4))
colnames(dat) <- c("run", "fission", "fusion","aneuploidy")
# get results
for(i in 1:length(files)){
# load results
load(paste("../results/empP-MCMC/tree.67/", files[i], sep = ""))
dat$run[i] <- files[i]
dat$fission[i] <- empP$empiricalP$EmpPvalueFission
dat$fusion[i] <- empP$empiricalP$EmpPvalueFusion
dat$aneuploidy[i] <- empP$empiricalP$EmpPvalueAneuploidy
# remove unwanted results
rm(empP)
}
dat
stringr::str_c("empPcond.",".nTips50.rr1.RData.tree.67.RData", collapse = "|")
stringr::str_remove(string = "empPcond.1.nTips50.rr1.RData.tree.67.RData",stringr::str_c("empPcond.",".nTips50.rr1.RData.tree.67.RData", collapse = "|"))
stringr::str_remove(string = "empPcond.1.nTips50.rr1.RData.tree.67.RData",
stringr::str_c("empPcond.",".nTips50.rr1.RData.tree.67.RData", collapse = "|"))
stringr::str_replace(string = "empPcond.1.nTips50.rr1.RData.tree.67.RData",
stringr::str_c("empPcond.",".nTips50.rr1.RData.tree.67.RData", collapse = "|"))
stringr::str_replace(string = "empPcond.1.nTips50.rr1.RData.tree.67.RData",
stringr::str_c("empPcond.",".nTips50.rr1.RData.tree.67.RData", collapse = "|"),replacement = "")
stringr::str_replace(string = "empPcond.1.nTips50.rr1.RData.tree.67.RData",
pattern = stringr::str_c("empPcond.",".nTips50.rr1.RData.tree.67.RData", collapse = "|"),
replacement = "")
