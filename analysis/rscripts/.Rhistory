cex = 0.7)
Ntip(tree)
# make three data tables
tipRates <- tipChroms <- tipFeeding <- as.data.frame(matrix(data = NA,
ncol = 100,
nrow = Ntip(tree)))
# get colnames
colnames(tipRates) <- colnames(tipChroms) <- colnames(tipFeeding) <- paste("test",1:100)
# get row names
row.names(tipRates) <- row.names(tipChroms) <- row.names(tipFeeding) <- tree$tip.label
final.results[[1]][tipRates,5]
final.results[[1]]
tipRates
5
final.results[[1]][tipRates]
final.results[[1]]
final.results[[1]][row.names(tipRates),]
final.results[[1]][row.names(tipRates),5]
for(j in 1:00){
tipRates[j] <- final.results[[j]][row.names(tipRates),5]
tipChroms[j] <- final.results[[j]][row.names(tipChroms),2]
tipFeeding[j] <- final.results[[j]][row.names(tipFeeding),4]
}
j
j
j <- 1
final.results[[j]][row.names(tipRates),5]
for(j in 1:00){
tipRates[,j] <- final.results[[j]][row.names(tipRates),5]
tipChroms[,j] <- final.results[[j]][row.names(tipChroms),2]
tipFeeding[,j] <- final.results[[j]][row.names(tipFeeding),4]
}
tipRates
# make three data tables
tipRates <- tipChroms <- tipFeeding <- as.data.frame(matrix(data = NA,
ncol = 100,
nrow = Ntip(tree)))
# get colnames
colnames(tipRates) <- colnames(tipChroms) <- colnames(tipFeeding) <- paste("test",1:100)
# get row names
row.names(tipRates) <- row.names(tipChroms) <- row.names(tipFeeding) <- tree$tip.label
j
for(j in 1:100){
tipRates[,j] <- final.results[[j]][row.names(tipRates),5]
tipChroms[,j] <- final.results[[j]][row.names(tipChroms),2]
tipFeeding[,j] <- final.results[[j]][row.names(tipFeeding),4]
}
tipRates
tipChroms
tipFeeding
rowMeans(tipFeeding)
rowMeans(tipFeeding) < 1
rowMeans(tipFeeding) > 0
tipFeeding[rowMeans(tipFeeding) > 0 & rowMeans(tipFeeding) < 1]
tipFeeding[rowMeans(tipFeeding) > 0 & rowMeans(tipFeeding) < 1,]
plotTree.wBars(tree = tree,
x = setNames(rowMeans(tipRates), rownames(tipRates)),
type = "fan",
col = c("red","blue")[(MCMC.dat$gen.prob + 1)],
border = NA,
lwd = 1,
scale = scale,
width = 1,
color = setNames(c("black","black","black",viridis(1,direction = -1)),
c(0,1,2,3)))
plotTree.wBars(tree = tree,
x = setNames(rowMeans(tipRates), rownames(tipRates)),
type = "fan",
col = c("red","blue")[tipFeeding[,sample(1:100,1)]],
border = NA,
lwd = 1,
scale = scale,
width = 1,
color = setNames(c("black","black","black",viridis(1,direction = -1)),
c(0,1,2,3)))
scale <- .5
plotTree.wBars(tree = tree,
x = setNames(rowMeans(tipRates), rownames(tipRates)),
type = "fan",
col = c("red","blue")[tipFeeding[,sample(1:100,1)]],
border = NA,
lwd = 1,
scale = scale,
width = 1,
color = setNames(c("black","black","black",viridis(1,direction = -1)),
c(0,1,2,3)))
scale <- .5
plotTree.wBars(tree = tree,
x = setNames(rowMeans(tipRates), rownames(tipRates)),
type = "fan",
col = c("red","blue")[tipFeeding[,sample(1:100,1)]],
border = NA,
lwd = 1,
scale = scale,
width = 1,
color = setNames(c("black","black","black",viridis(1,direction = -1)),
c(0,1,2,3)))
scale <- .5
plotTree.wBars(tree = tree,
x = setNames(rowMeans(tipRates), rownames(tipRates)),
type = "fan",
col = c("red","blue")[tipFeeding[,sample(1:100,1)]+1],
border = NA,
lwd = 1,
scale = scale,
width = 1,
color = setNames(c("black","black","black",viridis(1,direction = -1)),
c(0,1,2,3)))
scale <- .5
plotTree.wBars(tree = tree,
x = setNames(rowMeans(tipRates), rownames(tipRates)),
type = "fan",
col = c("red","blue")[tipFeeding[,sample(1:100,1)]+1],
border = NA,
lwd = 1,
scale = scale,
width = 1,
color = setNames(c("black","black","black",viridis(1,direction = -1)),
c(0,1,2,3)))
scale <- .5
plotTree.wBars(tree = tree,
x = setNames(rowMeans(tipRates), rownames(tipRates)),
type = "fan",
col = c("red","blue")[tipFeeding[,sample(1:100,1)]+1],
border = NA,
lwd = 1,
scale = scale,
width = 1,
color = setNames(c("black","black","black",viridis(1,direction = -1)),
c(0,1,2,3)))
scale <- .5
plotTree.wBars(tree = tree,
x = setNames(rowMeans(tipRates), rownames(tipRates)),
type = "fan",
col = c("red","blue")[tipFeeding[,sample(1:100,1)]+1],
border = NA,
lwd = 1,
scale = scale,
width = 1,
color = setNames(c("black","black","black",viridis(1,direction = -1)),
c(0,1,2,3)))
scale <- .5
plotTree.wBars(tree = tree,
x = setNames(rowMeans(tipRates), rownames(tipRates)),
type = "fan",
col = c("red","blue")[tipFeeding[,sample(1:100,1)]+1],
border = NA,
lwd = 1,
scale = scale,
width = 1,
color = setNames(c("black","black","black",viridis(1,direction = -1)),
c(0,1,2,3)))
scale <- .5
plotTree.wBars(tree = tree,
x = setNames(rowMeans(tipRates), rownames(tipRates)),
type = "fan",
col = c("red","blue")[tipFeeding[,sample(1:100,1)]+1],
border = NA,
lwd = 1,
scale = scale,
width = 1,
color = setNames(c("black","black","black",viridis(1,direction = -1)),
c(0,1,2,3)))
radi <- getRadius(scale = 0.5,
width = 1,
tree = tree,
tip.labels = FALSE,
trait.values = rowMeans(tipRates),
classes = 5)
#plot circles
draw.circle(x = 0,
y = 0,
radius = radi,
nv=100,
border="gray",
col=NA,
lty=2,
density=NULL,
angle=45,
lwd=1)
# add corresponding rate class for each rate
text(x = radi,
y = rep(0, length(radi)),
labels = names(radi),
srt = -90,
cex = 0.7)
# get the final result from all 100 runs
tipRateStat <- as.data.frame(matrix(data = NA,
ncol = 3,
nrow = Ntip(tree)))
colnames(tipRateStat) <- c("species", "genProb", "rate")
# fill
tipRateStat$species <- row.names(tipRates)
tipRateStat$genProb <- tipFeeding[,sample(1:100,1)]
tipRateStat$rate <- rowMeans(tipRates)
# get the final result from all 100 runs
tipRateStat <- as.data.frame(matrix(data = NA,
ncol = 3,
nrow = Ntip(tree)))
colnames(tipRateStat) <- c("species", "genProb", "rate")
# fill
tipRateStat$species <- row.names(tipRates)
tipRateStat$genProb <- tipFeeding[,sample(1:100,1)]
tipRateStat$rate <- rowMeans(tipRates)
# plot tree with branches
scale <- .9
plotTree.wBars(tree = tree,
x = setNames(tipRateStat$rate, tipRateStat$species),
type = "fan",
col = c("red","blue")[tipRateStat$genProb+1],
border = NA,
lwd = 1,
scale = scale,
width = 1,
color = setNames(c("black","black","black",viridis(1,direction = -1)),
c(0,1,2,3)))
radi <- getRadius(scale = scale,
width = 1,
tree = tree,
tip.labels = FALSE,
trait.values = tipRateStat$rate,
classes = 5)
#plot circles
draw.circle(x = 0,
y = 0,
radius = radi,
nv=100,
border="gray",
col=NA,
lty=2,
density=NULL,
angle=45,
lwd=1)
# add corresponding rate class for each rate
text(x = radi,
y = rep(0, length(radi)),
labels = names(radi),
srt = -90,
cex = 0.7)
# add legend
text(x = max(radi),
y = max(radi),
labels = "Binary trait",
pos = 4,
cex = .9)
xPoints <- max(radi)
points(x = rep(xPoints,2),
y = c(xPoints - xPoints * 0.05,
xPoints - xPoints * 0.1),
pch = 16,
col = c("blue","red"))
text(x = rep(xPoints,2),
y = c(xPoints - xPoints * 0.05,
xPoints - xPoints * 0.1),
labels = c("Generalists", "Specialists"),
pos = 4,
cex = 0.8)
# log transformed dodged bar plot
ggplot(tipRateStat, aes(x = log(rate),
fill = as.factor(genProb))) +
geom_histogram(position = "dodge2",
binwidth = 0.25) +
scale_fill_discrete("Larval feeding type",
labels = c("Specialists", "Generalists"),
type = c("#f1a340","#998ec3")) +
xlab(expression(paste("Species rate ", "(MY"^-1,")"))) +
ylab("Count") +
scale_x_continuous(breaks = log(c(0.01,0.1,1,10,100,1000)),
labels = c(0.01,0.1,1,10,100,1000)) +
theme_bw()
# log transformed woth zero rates dodged bar plot
ggplot(MCMC.dat, aes(x = log(rate + 1),
fill = as.factor(genProb))) +
geom_histogram(position = "dodge2",
binwidth = 0.25) +
scale_fill_discrete("Larval feeding type",
labels = c("Specialists", "Generalists"),
type = c("#f1a340","#998ec3")) +
xlab(expression(paste("Species rate ", "(MY "^-1,")"))) +
ylab("Count") +
scale_x_continuous(breaks = log(c(0.01,0.1,1,10,100,1000)),
labels = c(0.01,0.1,1,10,100,1000)) +
theme_bw()
# log transformed woth zero rates dodged bar plot
ggplot(tipRateStat, aes(x = log(rate + 1),
fill = as.factor(genProb))) +
geom_histogram(position = "dodge2",
binwidth = 0.25) +
scale_fill_discrete("Larval feeding type",
labels = c("Specialists", "Generalists"),
type = c("#f1a340","#998ec3")) +
xlab(expression(paste("Species rate ", "(MY "^-1,")"))) +
ylab("Count") +
scale_x_continuous(breaks = log(c(0.01,0.1,1,10,100,1000)),
labels = c(0.01,0.1,1,10,100,1000)) +
theme_bw()
# square root transformed dodged bar plot
ggplot(tipRateStat, aes(x = sqrt(rate),
fill = as.factor(genProb))) +
geom_histogram(position = "dodge2",
binwidth = 0.25) +
scale_fill_discrete("Larval feeding type",
labels = c("Specialists", "Generalists"),
type = c("#f1a340","#998ec3")) +
xlab(expression(paste("Species rate ", "(MY "^ -1,")"))) +
ylab("Count") +
scale_x_continuous(breaks = c(0,1,2,3,4,5,6,7,8,9,10,11,12),
labels = c(0,1,4,9,16,25,36,49,64,81,100,121,144)) +
theme_bw()
# log transformed dodged bar plot
ggplot(tipRateStat, aes(x = rate^2,
fill = as.factor(genProb))) +
geom_histogram(position = "dodge2",
binwidth = 0.25) +
scale_fill_discrete("Larval feeding type",
labels = c("Specialists", "Generalists"),
type = c("#f1a340","#998ec3")) +
xlab(expression(paste("Species rate ", "(MY"^-1,")"))) +
ylab("Count") +
scale_x_continuous(breaks = log(c(0.01,0.1,1,10,100,1000)),
labels = c(0.01,0.1,1,10,100,1000)) +
theme_bw()
# log transformed dodged bar plot
ggplot(tipRateStat, aes(x = tan(rate),
fill = as.factor(genProb))) +
geom_histogram(position = "dodge2",
binwidth = 0.25) +
scale_fill_discrete("Larval feeding type",
labels = c("Specialists", "Generalists"),
type = c("#f1a340","#998ec3")) +
xlab(expression(paste("Species rate ", "(MY"^-1,")"))) +
ylab("Count") +
scale_x_continuous(breaks = log(c(0.01,0.1,1,10,100,1000)),
labels = c(0.01,0.1,1,10,100,1000)) +
theme_bw()
# log transformed dodged bar plot
ggplot(tipRateStat, aes(x = 1/(rate),
fill = as.factor(genProb))) +
geom_histogram(position = "dodge2",
binwidth = 0.25) +
scale_fill_discrete("Larval feeding type",
labels = c("Specialists", "Generalists"),
type = c("#f1a340","#998ec3")) +
xlab(expression(paste("Species rate ", "(MY"^-1,")"))) +
ylab("Count") +
scale_x_continuous(breaks = log(c(0.01,0.1,1,10,100,1000)),
labels = c(0.01,0.1,1,10,100,1000)) +
theme_bw()
# log transformed dodged bar plot
ggplot(tipRateStat, aes(x = (rate^2),
fill = as.factor(genProb))) +
geom_histogram(position = "dodge2",
binwidth = 0.25) +
scale_fill_discrete("Larval feeding type",
labels = c("Specialists", "Generalists"),
type = c("#f1a340","#998ec3")) +
xlab(expression(paste("Species rate ", "(MY"^-1,")"))) +
ylab("Count") +
theme_bw()
# log transformed dodged bar plot
ggplot(tipRateStat, aes(x = (rate)^2,
fill = as.factor(genProb))) +
geom_histogram(position = "dodge2",
binwidth = 0.25) +
scale_fill_discrete("Larval feeding type",
labels = c("Specialists", "Generalists"),
type = c("#f1a340","#998ec3")) +
xlab(expression(paste("Species rate ", "(MY"^-1,")"))) +
ylab("Count") +
theme_bw()
# log transformed dodged bar plot
ggplot(tipRateStat, aes(x = (rate)^2,
fill = as.factor(genProb))) +
geom_histogram(position = "dodge2") +
scale_fill_discrete("Larval feeding type",
labels = c("Specialists", "Generalists"),
type = c("#f1a340","#998ec3")) +
xlab(expression(paste("Species rate ", "(MY"^-1,")"))) +
ylab("Count") +
theme_bw()
# log transformed dodged bar plot
ggplot(tipRateStat, aes(x = (rate)^2,
fill = as.factor(genProb))) +
geom_histogram(position = "dodge2",
binwidth = 25) +
scale_fill_discrete("Larval feeding type",
labels = c("Specialists", "Generalists"),
type = c("#f1a340","#998ec3")) +
xlab(expression(paste("Species rate ", "(MY"^-1,")"))) +
ylab("Count") +
theme_bw()
# log transformed woth zero rates dodged bar plot
ggplot(tipRateStat, aes(x = log(rate + 1),
fill = as.factor(genProb))) +
geom_histogram(position = "dodge2",
binwidth = 0.25) +
scale_fill_discrete("Larval feeding type",
labels = c("Specialists", "Generalists"),
type = c("#f1a340","#998ec3")) +
xlab(expression(paste("Species rate ", "(MY "^-1,")"))) +
ylab("Count") +
scale_x_continuous(breaks = log(c(0.01,0.1,1,10,100,1000)),
labels = c(0.01,0.1,1,10,100,1000)) +
theme_bw()
# square root transformed dodged bar plot
ggplot(tipRateStat, aes(x = sqrt(rate),
fill = as.factor(genProb))) +
geom_histogram(position = "dodge2",
binwidth = 0.25) +
scale_fill_discrete("Larval feeding type",
labels = c("Specialists", "Generalists"),
type = c("#f1a340","#998ec3")) +
xlab(expression(paste("Species rate ", "(MY "^ -1,")"))) +
ylab("Count") +
scale_x_continuous(breaks = c(0,1,2,3,4,5,6,7,8,9,10,11,12),
labels = c(0,1,4,9,16,25,36,49,64,81,100,121,144)) +
theme_bw()
# non parametric t test
wilcox.test(tipRateStat$rate ~ tipRateStat$genProb)
library(ape)
library(castor)
tree <- rcoal(10)
tipstates <- sample(6:10, Ntip(tree), replace = T)
plot(tree, show.tip.label = F)
names(tipstates) <- tree$tip.label
# run castor
asr_mk_model(tree = tree,
tip_states = tipstates)
# run castor
asr_mk_model(tree = tree,
tip_states = tipstates,
include_ancestral_likelihoods = T)
# run castor
anc <-  asr_mk_model(tree = tree,
tip_states = tipstates,
include_ancestral_likelihoods = T)
anc$ancestral_likelihoods
Nnode(tree)
# run castor
anc <-  asr_mk_model(tree = tree,
tip_states = tipstates,
include_ancestral_likelihoods = T,Nstates = 10)
anc$ancestral_likelihoods
# run castor
anc <-  asr_mk_model(tree = tree,
tip_states = tipstates,
include_ancestral_likelihoods = T,rate_model = "ER")
anc$ancestral_likelihoods
# run castor
anc <-  asr_mk_model(tree = tree,
tip_states = tipstates,
include_ancestral_likelihoods = T,rate_model = "ARD")
anc$ancestral_likelihoods
# make a tree
tree <- rcoal(17)
# make tiplables
tipstates <- sample(6:10, Ntip(tree), replace = T)
names(tipstates) <- tree$tip.label
# plot the tree
plot(tree, show.tip.label = F)
# run castor
anc <-  asr_mk_model(tree = tree,
tip_states = tipstates,
include_ancestral_likelihoods = T)
anc$ancestral_likelihoods
tipstates
# make a tree
tree <- rcoal(10)
# make tiplables
tipstates <- sample(6:17, Ntip(tree), replace = T)
names(tipstates) <- tree$tip.label
# plot the tree
plot(tree, show.tip.label = F)
# run castor
anc <-  asr_mk_model(tree = tree,
tip_states = tipstates,
include_ancestral_likelihoods = T)
anc$ancestral_likelihoods
tipstates
?asr_mk_model
tree$Nnode
nodelabels()
pbtree
pbtree()
load("C:/Users/prada/Documents/GitHub/lepidoptera/analysis/results/7a.Lepidoptera.branch.specific.rates.RData")
asr$ancestral_likelihoods
asr$ancestral_likelihoods
i
node.chroms$node
node.chroms$node[i]
node.chroms$node
poss.state
length(poss.state)
node.chroms
chrom.states$state
which(as.numeric(chrom.states$state) == node.chroms$state[i])
as.numeric(chrom.states$state)
node.chroms$state
parMat
chrom.mat
states
asr
chrom.states
node.chroms$node
tree$edge
tree$edge[,1]
tree$edge[,1] == node.chroms$node
tree$edge[,1] == node.chroms$node[i]
i
final.results
l
MCMC.dat
