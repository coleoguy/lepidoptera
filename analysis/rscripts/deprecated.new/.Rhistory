# get suggested burnin based on all runs
suggestedBurnin <-  (maxBurn / nGen) * 2
# print this suggestion
# print(paste("Suggested burn-in ", suggestedBurnin, "%", sep = ""))
# get the output
return(suggestedBurnin)
}
BurninCalc(dat = results)
BurninCalc <- function(dat = NULL,
window.size = NULL,
nGen = NULL,
likelihood.Column = NULL,
get.post.burnin = NULL){
results <- dat
window.size <- 10
nGen <- 100
goodRuns <- badRuns <- as.data.frame(matrix(data = NA,
nrow = length(results),
ncol = 2))
colnames(goodRuns) <- colnames(badRuns) <- c("iteration", "generation")
EndofBurn <- c()
tTestVar <- tTestSD <- tTestPecent <- as.data.frame(matrix(data = NA,
nrow = length(results) * nGen,
ncol = 3))
colnames(tTestVar) <- colnames(tTestSD) <- colnames(tTestPecent) <- c("tree", "gen", "p-value")
counter <- 1
for(i in 1:length(results)){
varVector <- vector(mode = "numeric", length = nrow(results[[i]]))
sdVector <- vector(mode = "numeric", length = nrow(results[[i]]))
# meanVector <- vector(mode = "numeric", length = nrow(results[[i]]))
pecentChange <- vector(mode = "numeric", length = nrow(results[[i]]))
degreeOfChange <- vector(mode = "numeric", length = nrow(results[[i]]))
atanVectorLikelihood <- vector(mode = "numeric", length = nrow(results[[i]]))
atanVectorVar <- vector(mode = "numeric", length = nrow(results[[i]]))
atanVectorSD <- vector(mode = "numeric", length = nrow(results[[i]]))
atanVectorMean <- vector(mode = "numeric", length = nrow(results[[i]]))
for(j in 2:(nrow(results[[i]]))){
pecentChange[j] <- ((results[[i]]$p[j] - results[[i]]$p[j-1]) / results[[i]]$p[j-1]) * 100
degreeOfChange[j] <- (atan(results[[i]]$p[j] - results[[i]]$p[j - 1]) * (180/pi))
if(nrow(results[[i]]) - j > window.size){
varVector[j] <- var(results[[i]]$p[j:(j+window.size)])
sdVector[j] <- sd(results[[i]]$p[j:(j+window.size)])
meanVector[j] <- mean(results[[i]]$p[j:(j+window.size)])
}else{
varVector[j] <- var(results[[i]]$p[j:nrow(results[[i]])])
sdVector[j] <- sd(results[[i]]$p[j:nrow(results[[i]])])
meanVector[j] <- mean(results[[i]]$p[j:nrow(results[[i]])])
}
}
for(j in 1:nGen){
if((j + window.size) < nGen){
tTestVar$tree[counter] <- i
tTestVar$gen[counter] <- j
tTestVar$`p-value` <- t.test(varVector[j:j+window.size])
tTestSD$tree[counter] <- i
tTestSD$gen[counter] <- j
tTestSD$`p-value` <- t.test(varVector[j:j+window.size])
tTestPecent$tree[counter] <- i
tTestPecent$gen[counter] <- j
tTestPecent$`p-value` <- t.test(varVector[j:j+window.size])
}else{
tTestVar$tree[counter] <- i
tTestVar$gen[counter] <- j
tTestVar$`p-value` <- t.test(varVector[j:nGen])
tTestSD$tree[counter] <- i
tTestSD$gen[counter] <- j
tTestSD$`p-value` <- t.test(varVector[j:nGen])
tTestPecent$tree[counter] <- i
tTestPecent$gen[counter] <- j
tTestPecent$`p-value` <- t.test(varVector[j:nGen])
}
counter <- counter + 1
}
EndofBurn <- min(which(degreeOfChange[-1] < 0)) + 1
if(EndofBurn * 2 >= length(results[[i]]$p * 0.5)){
# runs that took long time to burn
badRuns$iteration[i] <- i
badRuns$generation <- EndofBurn
}else{
# runs that burn well
goodRuns$iteration[i] <- i
goodRuns$generation[i] <- EndofBurn
}
}
# get the highest generation when the burn period had stopped
maxBurn <- max(goodRuns$generation)
# get suggested burnin based on all runs
suggestedBurnin <-  (maxBurn / nGen) * 2
# print this suggestion
# print(paste("Suggested burn-in ", suggestedBurnin, "%", sep = ""))
# get the output
return(suggestedBurnin)
}
BurninCalc(dat = results)
BurninCalc <- function(dat = NULL,
window.size = NULL,
nGen = NULL,
likelihood.Column = NULL,
get.post.burnin = NULL){
results <- dat
window.size <- 10
nGen <- 100
goodRuns <- badRuns <- as.data.frame(matrix(data = NA,
nrow = length(results),
ncol = 2))
colnames(goodRuns) <- colnames(badRuns) <- c("iteration", "generation")
EndofBurn <- c()
tTestVar <- tTestSD <- tTestPecent <- as.data.frame(matrix(data = NA,
nrow = length(results) * nGen,
ncol = 3))
colnames(tTestVar) <- colnames(tTestSD) <- colnames(tTestPecent) <- c("tree", "gen", "p-value")
counter <- 1
for(i in 1:length(results)){
varVector <- vector(mode = "numeric", length = nrow(results[[i]]))
sdVector <- vector(mode = "numeric", length = nrow(results[[i]]))
# meanVector <- vector(mode = "numeric", length = nrow(results[[i]]))
pecentChange <- vector(mode = "numeric", length = nrow(results[[i]]))
degreeOfChange <- vector(mode = "numeric", length = nrow(results[[i]]))
atanVectorLikelihood <- vector(mode = "numeric", length = nrow(results[[i]]))
atanVectorVar <- vector(mode = "numeric", length = nrow(results[[i]]))
atanVectorSD <- vector(mode = "numeric", length = nrow(results[[i]]))
atanVectorMean <- vector(mode = "numeric", length = nrow(results[[i]]))
for(j in 2:(nrow(results[[i]]))){
pecentChange[j] <- ((results[[i]]$p[j] - results[[i]]$p[j-1]) / results[[i]]$p[j-1]) * 100
degreeOfChange[j] <- (atan(results[[i]]$p[j] - results[[i]]$p[j - 1]) * (180/pi))
if(nrow(results[[i]]) - j > window.size){
varVector[j] <- var(results[[i]]$p[j:(j+window.size)])
sdVector[j] <- sd(results[[i]]$p[j:(j+window.size)])
meanVector[j] <- mean(results[[i]]$p[j:(j+window.size)])
}else{
varVector[j] <- var(results[[i]]$p[j:nrow(results[[i]])])
sdVector[j] <- sd(results[[i]]$p[j:nrow(results[[i]])])
meanVector[j] <- mean(results[[i]]$p[j:nrow(results[[i]])])
}
}
for(j in 1:nGen){
if((j + window.size) < nGen){
tTestVar$tree[counter] <- i
tTestVar$gen[counter] <- j
tTestVar$`p-value` <- t.test(varVector[j:(j+window.size)])
tTestSD$tree[counter] <- i
tTestSD$gen[counter] <- j
tTestSD$`p-value` <- t.test(varVector[j:(j+window.size)])
tTestPecent$tree[counter] <- i
tTestPecent$gen[counter] <- j
tTestPecent$`p-value` <- t.test(varVector[j:(j+window.size)])
}else{
tTestVar$tree[counter] <- i
tTestVar$gen[counter] <- j
tTestVar$`p-value` <- t.test(varVector[j:nGen])
tTestSD$tree[counter] <- i
tTestSD$gen[counter] <- j
tTestSD$`p-value` <- t.test(varVector[j:nGen])
tTestPecent$tree[counter] <- i
tTestPecent$gen[counter] <- j
tTestPecent$`p-value` <- t.test(varVector[j:nGen])
}
counter <- counter + 1
}
EndofBurn <- min(which(degreeOfChange[-1] < 0)) + 1
if(EndofBurn * 2 >= length(results[[i]]$p * 0.5)){
# runs that took long time to burn
badRuns$iteration[i] <- i
badRuns$generation <- EndofBurn
}else{
# runs that burn well
goodRuns$iteration[i] <- i
goodRuns$generation[i] <- EndofBurn
}
}
# get the highest generation when the burn period had stopped
maxBurn <- max(goodRuns$generation)
# get suggested burnin based on all runs
suggestedBurnin <-  (maxBurn / nGen) * 2
# print this suggestion
# print(paste("Suggested burn-in ", suggestedBurnin, "%", sep = ""))
# get the output
return(suggestedBurnin)
}
BurninCalc(dat = results)
t.test(1:10)
BurninCalc <- function(dat = NULL,
window.size = NULL,
nGen = NULL,
likelihood.Column = NULL,
get.post.burnin = NULL){
results <- dat
window.size <- 10
nGen <- 100
goodRuns <- badRuns <- as.data.frame(matrix(data = NA,
nrow = length(results),
ncol = 2))
colnames(goodRuns) <- colnames(badRuns) <- c("iteration", "generation")
EndofBurn <- c()
tTestVar <- tTestSD <- tTestPecent <- as.data.frame(matrix(data = NA,
nrow = length(results) * nGen,
ncol = 3))
colnames(tTestVar) <- colnames(tTestSD) <- colnames(tTestPecent) <- c("tree", "gen", "p-value")
counter <- 1
for(i in 1:length(results)){
varVector <- vector(mode = "numeric", length = nrow(results[[i]]))
sdVector <- vector(mode = "numeric", length = nrow(results[[i]]))
# meanVector <- vector(mode = "numeric", length = nrow(results[[i]]))
pecentChange <- vector(mode = "numeric", length = nrow(results[[i]]))
degreeOfChange <- vector(mode = "numeric", length = nrow(results[[i]]))
atanVectorLikelihood <- vector(mode = "numeric", length = nrow(results[[i]]))
atanVectorVar <- vector(mode = "numeric", length = nrow(results[[i]]))
atanVectorSD <- vector(mode = "numeric", length = nrow(results[[i]]))
atanVectorMean <- vector(mode = "numeric", length = nrow(results[[i]]))
for(j in 2:(nrow(results[[i]]))){
pecentChange[j] <- ((results[[i]]$p[j] - results[[i]]$p[j-1]) / results[[i]]$p[j-1]) * 100
degreeOfChange[j] <- (atan(results[[i]]$p[j] - results[[i]]$p[j - 1]) * (180/pi))
if(nrow(results[[i]]) - j > window.size){
varVector[j] <- var(results[[i]]$p[j:(j+window.size)])
sdVector[j] <- sd(results[[i]]$p[j:(j+window.size)])
meanVector[j] <- mean(results[[i]]$p[j:(j+window.size)])
}else{
varVector[j] <- var(results[[i]]$p[j:nrow(results[[i]])])
sdVector[j] <- sd(results[[i]]$p[j:nrow(results[[i]])])
meanVector[j] <- mean(results[[i]]$p[j:nrow(results[[i]])])
}
}
for(j in 1:nGen){
if((j+(window.size *2)) < nGen){
tTestVar$tree[counter] <- i
tTestVar$gen[counter] <- j
tTestVar$`p-value` <- t.test(varVector[j:(j+window.size)], varVector[(j+window.size):(j+(window.size *2))])
tTestSD$tree[counter] <- i
tTestSD$gen[counter] <- j
tTestSD$`p-value` <- t.test(varVector[j:(j+window.size)], varVector[(j+window.size):(j+(window.size *2))])
tTestPecent$tree[counter] <- i
tTestPecent$gen[counter] <- j
tTestPecent$`p-value` <- t.test(varVector[j:(j+window.size)], varVector[(j+window.size):(j+(window.size *2))])
}else{
tTestVar$tree[counter] <- i
tTestVar$gen[counter] <- j
tTestVar$`p-value` <- t.test(varVector[j:(j+window.size)], varVector[(j+window.size):nGen])
tTestSD$tree[counter] <- i
tTestSD$gen[counter] <- j
tTestSD$`p-value` <- t.test(varVector[j:(j+window.size)], varVector[(j+window.size):nGen])
tTestPecent$tree[counter] <- i
tTestPecent$gen[counter] <- j
tTestPecent$`p-value` <- t.test(varVector[j:(j+window.size)], varVector[(j+window.size):nGen])
}
counter <- counter + 1
}
EndofBurn <- min(which(degreeOfChange[-1] < 0)) + 1
if(EndofBurn * 2 >= length(results[[i]]$p * 0.5)){
# runs that took long time to burn
badRuns$iteration[i] <- i
badRuns$generation <- EndofBurn
}else{
# runs that burn well
goodRuns$iteration[i] <- i
goodRuns$generation[i] <- EndofBurn
}
}
# get the highest generation when the burn period had stopped
maxBurn <- max(goodRuns$generation)
# get suggested burnin based on all runs
suggestedBurnin <-  (maxBurn / nGen) * 2
# print this suggestion
# print(paste("Suggested burn-in ", suggestedBurnin, "%", sep = ""))
# get the output
return(suggestedBurnin)
}
BurninCalc(dat = results)
for(j in 1:nGen){
if((j+(window.size *2)) < nGen){
tTestVar$tree[counter] <- i
tTestVar$gen[counter] <- j
tTestVar$`p-value` <- t.test(varVector[j:(j+window.size)], varVector[(j+window.size):(j+(window.size *2))])
tTestSD$tree[counter] <- i
tTestSD$gen[counter] <- j
tTestSD$`p-value` <- t.test(varVector[j:(j+window.size)], varVector[(j+window.size):(j+(window.size *2))])
tTestPecent$tree[counter] <- i
tTestPecent$gen[counter] <- j
tTestPecent$`p-value` <- t.test(varVector[j:(j+window.size)], varVector[(j+window.size):(j+(window.size *2))])
}else{
tTestVar$tree[counter] <- i
tTestVar$gen[counter] <- j
tTestVar$`p-value` <- t.test(varVector[j:(j+window.size)], varVector[(j+window.size):nGen])
tTestSD$tree[counter] <- i
tTestSD$gen[counter] <- j
tTestSD$`p-value` <- t.test(varVector[j:(j+window.size)], varVector[(j+window.size):nGen])
tTestPecent$tree[counter] <- i
tTestPecent$gen[counter] <- j
tTestPecent$`p-value` <- t.test(varVector[j:(j+window.size)], varVector[(j+window.size):nGen])
}
counter <- counter + 1
}
window.size <- 10
for(j in 1:nGen){
if((j+(window.size *2)) < nGen){
tTestVar$tree[counter] <- i
tTestVar$gen[counter] <- j
tTestVar$`p-value` <- t.test(varVector[j:(j+window.size)], varVector[(j+window.size):(j+(window.size *2))])
tTestSD$tree[counter] <- i
tTestSD$gen[counter] <- j
tTestSD$`p-value` <- t.test(varVector[j:(j+window.size)], varVector[(j+window.size):(j+(window.size *2))])
tTestPecent$tree[counter] <- i
tTestPecent$gen[counter] <- j
tTestPecent$`p-value` <- t.test(varVector[j:(j+window.size)], varVector[(j+window.size):(j+(window.size *2))])
}else{
tTestVar$tree[counter] <- i
tTestVar$gen[counter] <- j
tTestVar$`p-value` <- t.test(varVector[j:(j+window.size)], varVector[(j+window.size):nGen])
tTestSD$tree[counter] <- i
tTestSD$gen[counter] <- j
tTestSD$`p-value` <- t.test(varVector[j:(j+window.size)], varVector[(j+window.size):nGen])
tTestPecent$tree[counter] <- i
tTestPecent$gen[counter] <- j
tTestPecent$`p-value` <- t.test(varVector[j:(j+window.size)], varVector[(j+window.size):nGen])
}
counter <- counter + 1
}
counter <- 1
for(j in 1:nGen){
if((j+(window.size *2)) < nGen){
tTestVar$tree[counter] <- i
tTestVar$gen[counter] <- j
tTestVar$`p-value` <- t.test(varVector[j:(j+window.size)], varVector[(j+window.size):(j+(window.size *2))])
tTestSD$tree[counter] <- i
tTestSD$gen[counter] <- j
tTestSD$`p-value` <- t.test(varVector[j:(j+window.size)], varVector[(j+window.size):(j+(window.size *2))])
tTestPecent$tree[counter] <- i
tTestPecent$gen[counter] <- j
tTestPecent$`p-value` <- t.test(varVector[j:(j+window.size)], varVector[(j+window.size):(j+(window.size *2))])
}else{
tTestVar$tree[counter] <- i
tTestVar$gen[counter] <- j
tTestVar$`p-value` <- t.test(varVector[j:(j+window.size)], varVector[(j+window.size):nGen])
tTestSD$tree[counter] <- i
tTestSD$gen[counter] <- j
tTestSD$`p-value` <- t.test(varVector[j:(j+window.size)], varVector[(j+window.size):nGen])
tTestPecent$tree[counter] <- i
tTestPecent$gen[counter] <- j
tTestPecent$`p-value` <- t.test(varVector[j:(j+window.size)], varVector[(j+window.size):nGen])
}
counter <- counter + 1
}
tTestVar
t.test(varVector[j:(j+window.size)], varVector[(j+window.size):(j+(window.size *2))])
t.test(varVector[j:(j+window.size)], varVector[(j+window.size):(j+(window.size *2))])
j
tTestVar$`p-value`
for(j in 1:nGen){
if((j+(window.size *2)) < nGen){
tTestVar$tree[counter] <- i
tTestVar$gen[counter] <- j
tTestVar$`p-value`[counter] <- t.test(varVector[j:(j+window.size)], varVector[(j+window.size):(j+(window.size *2))])$p.value
tTestSD$tree[counter] <- i
tTestSD$gen[counter] <- j
tTestSD$`p-value`[counter] <- t.test(varVector[j:(j+window.size)], varVector[(j+window.size):(j+(window.size *2))])$p.value
tTestPecent$tree[counter] <- i
tTestPecent$gen[counter] <- j
tTestPecent$`p-value`[counter] <- t.test(varVector[j:(j+window.size)], varVector[(j+window.size):(j+(window.size *2))])$p.value
}else{
tTestVar$tree[counter] <- i
tTestVar$gen[counter] <- j
tTestVar$`p-value`[counter] <- t.test(varVector[j:(j+window.size)], varVector[(j+window.size):nGen])$p.value
tTestSD$tree[counter] <- i
tTestSD$gen[counter] <- j
tTestSD$`p-value`[counter] <- t.test(varVector[j:(j+window.size)], varVector[(j+window.size):nGen])$p.value
tTestPecent$tree[counter] <- i
tTestPecent$gen[counter] <- j
tTestPecent$`p-value`[counter] <- t.test(varVector[j:(j+window.size)], varVector[(j+window.size):nGen])$p.value
}
counter <- counter + 1
}
tTestSD
tTestVar <- tTestSD <- tTestPecent <- as.data.frame(matrix(data = NA,
nrow = length(results) * nGen,
ncol = 3))
colnames(tTestVar) <- colnames(tTestSD) <- colnames(tTestPecent) <- c("tree", "gen", "p-value")
for(j in 1:nGen){
if((j+(window.size *2)) < nGen){
tTestVar$tree[counter] <- i
tTestVar$gen[counter] <- j
tTestVar$`p-value`[counter] <- t.test(varVector[j:(j+window.size)], varVector[(j+window.size):(j+(window.size *2))])$p.value
tTestSD$tree[counter] <- i
tTestSD$gen[counter] <- j
tTestSD$`p-value`[counter] <- t.test(varVector[j:(j+window.size)], varVector[(j+window.size):(j+(window.size *2))])$p.value
tTestPecent$tree[counter] <- i
tTestPecent$gen[counter] <- j
tTestPecent$`p-value`[counter] <- t.test(varVector[j:(j+window.size)], varVector[(j+window.size):(j+(window.size *2))])$p.value
}else{
tTestVar$tree[counter] <- i
tTestVar$gen[counter] <- j
tTestVar$`p-value`[counter] <- t.test(varVector[j:(j+window.size)], varVector[(j+window.size):nGen])$p.value
tTestSD$tree[counter] <- i
tTestSD$gen[counter] <- j
tTestSD$`p-value`[counter] <- t.test(varVector[j:(j+window.size)], varVector[(j+window.size):nGen])$p.value
tTestPecent$tree[counter] <- i
tTestPecent$gen[counter] <- j
tTestPecent$`p-value`[counter] <- t.test(varVector[j:(j+window.size)], varVector[(j+window.size):nGen])$p.value
}
counter <- counter + 1
}
tTestPecent
counter <- 1
for(j in 1:nGen){
if((j+(window.size *2)) < nGen){
tTestVar$tree[counter] <- i
tTestVar$gen[counter] <- j
tTestVar$`p-value`[counter] <- t.test(varVector[j:(j+window.size)], varVector[(j+window.size):(j+(window.size *2))])$p.value
tTestSD$tree[counter] <- i
tTestSD$gen[counter] <- j
tTestSD$`p-value`[counter] <- t.test(varVector[j:(j+window.size)], varVector[(j+window.size):(j+(window.size *2))])$p.value
tTestPecent$tree[counter] <- i
tTestPecent$gen[counter] <- j
tTestPecent$`p-value`[counter] <- t.test(varVector[j:(j+window.size)], varVector[(j+window.size):(j+(window.size *2))])$p.value
}else{
tTestVar$tree[counter] <- i
tTestVar$gen[counter] <- j
tTestVar$`p-value`[counter] <- t.test(varVector[j:(j+window.size)], varVector[(j+window.size):nGen])$p.value
tTestSD$tree[counter] <- i
tTestSD$gen[counter] <- j
tTestSD$`p-value`[counter] <- t.test(varVector[j:(j+window.size)], varVector[(j+window.size):nGen])$p.value
tTestPecent$tree[counter] <- i
tTestPecent$gen[counter] <- j
tTestPecent$`p-value`[counter] <- t.test(varVector[j:(j+window.size)], varVector[(j+window.size):nGen])$p.value
}
counter <- counter + 1
}
tTestPecent
tTestPecent$`p-value`[1:100]
tTestPecent$`p-value`[1:88]
plot(tTestPecent$`p-value`[1:88])
tTestPecent$`p-value`[1:88] > 0.05
tTestPecent$`p-value`[1:88] < 0.05
counter <- 1
for(j in 1:nGen){
if((j+(window.size *2)) < nGen){
tTestVar$tree[counter] <- i
tTestVar$gen[counter] <- j
tTestVar$`p-value`[counter] <- t.test(varVector[j:(j+window.size)], varVector[(j+window.size):(j+(window.size *2))])$p.value
tTestSD$tree[counter] <- i
tTestSD$gen[counter] <- j
tTestSD$`p-value`[counter] <- t.test(sdVector[j:(j+window.size)], sdVector[(j+window.size):(j+(window.size *2))])$p.value
tTestPecent$tree[counter] <- i
tTestPecent$gen[counter] <- j
tTestPecent$`p-value`[counter] <- t.test(pecentChange[j:(j+window.size)], pecentChange[(j+window.size):(j+(window.size *2))])$p.value
}else{
tTestVar$tree[counter] <- i
tTestVar$gen[counter] <- j
tTestVar$`p-value`[counter] <- t.test(varVector[j:(j+window.size)], varVector[(j+window.size):nGen])$p.value
tTestSD$tree[counter] <- i
tTestSD$gen[counter] <- j
tTestSD$`p-value`[counter] <- t.test(sdVector[j:(j+window.size)], sdVector[(j+window.size):nGen])$p.value
tTestPecent$tree[counter] <- i
tTestPecent$gen[counter] <- j
tTestPecent$`p-value`[counter] <- t.test(pecentChange[j:(j+window.size)], pecentChange[(j+window.size):nGen])$p.value
}
counter <- counter + 1
}
plot(tTestPecent$`p-value`[1:88])
tTestPecent$`p-value`[1:88]
tTestSD$`p-value`[1:88]
plot(tTestSD$`p-value`[1:88])
plot(tTestvat$`p-value`[1:88])
plot(tTestVar$`p-value`[1:88])
window.size <- 5
counter <- 1
for(j in 1:nGen){
if((j+(window.size *2)) < nGen){
tTestVar$tree[counter] <- i
tTestVar$gen[counter] <- j
tTestVar$`p-value`[counter] <- t.test(varVector[j:(j+window.size)], varVector[(j+window.size):(j+(window.size *2))])$p.value
tTestSD$tree[counter] <- i
tTestSD$gen[counter] <- j
tTestSD$`p-value`[counter] <- t.test(sdVector[j:(j+window.size)], sdVector[(j+window.size):(j+(window.size *2))])$p.value
tTestPecent$tree[counter] <- i
tTestPecent$gen[counter] <- j
tTestPecent$`p-value`[counter] <- t.test(pecentChange[j:(j+window.size)], pecentChange[(j+window.size):(j+(window.size *2))])$p.value
}else{
tTestVar$tree[counter] <- i
tTestVar$gen[counter] <- j
tTestVar$`p-value`[counter] <- t.test(varVector[j:(j+window.size)], varVector[(j+window.size):nGen])$p.value
tTestSD$tree[counter] <- i
tTestSD$gen[counter] <- j
tTestSD$`p-value`[counter] <- t.test(sdVector[j:(j+window.size)], sdVector[(j+window.size):nGen])$p.value
tTestPecent$tree[counter] <- i
tTestPecent$gen[counter] <- j
tTestPecent$`p-value`[counter] <- t.test(pecentChange[j:(j+window.size)], pecentChange[(j+window.size):nGen])$p.value
}
counter <- counter + 1
}
plot(tTestVar$`p-value`[1:88])
plot(tTestSD$`p-value`[1:88])
plot(tTestPecent$`p-value`[1:88])
# load libraries
library(ape)
library(phytools)
library(chromePlus)
library(diversitree)
library(doSNOW)
library(parallel)
# get helper functions
source("helper.functions.R")
# read in data
dat <- read.delim("../data/chroms/chroms.txt", as.is = T)
host <- read.csv("../data/hosts/papilionoidea-hosts.csv", as.is = T)
trees <- read.tree("../data/trees/processed.trees.new")
# combine genus and species names to get the full name in hosts dataset and in
# chroms dataset
host$SpeciesNames <- paste(host$genus, host$species, sep = "_")
# fill in species for data
dat$SpecisName <- paste(dat$other.names.genera,
dat$other.names.species,
sep = "_")
dat$binomial
