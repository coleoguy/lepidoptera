if (is.null(opt$prefix)){
print_help(opt_parser)
stop("Please provide the prefix", call.=FALSE)
}else if (is.null(opt$infofile)){
print_help(opt_parser)
stop("Please provide the info file", call.=FALSE)
}else if (is.null(opt$maxK)){
print_help(opt_parser)
stop("Please provide the maximum K value to plot", call.=FALSE)
}else if (is.null(opt$populations)){
print_help(opt_parser)
stop("Please provide a comma-separated list of populations/species", call.=FALSE)
}
opt$minK
install.packages("diversitree")
install.packages("diversitree")
install.packages("diversitree")
clear
ls()
install.packages("diversitree")
install.packages("devtools")
setwd("~/Desktop/Terrence/lepidoptera/simulations")
library(coda)
source("functions.R")
files <- dir()
files <- files[grep("cond", files)]
dat <- as.data.frame(matrix(data = NA,
nrow = length(files),
ncol = 4))
colnames(dat) <- c("sim", "sigFission", "sigFusion", "sigAneuploidy")
for(i in 1:length(files)){
load(files[i])
plotlikMCMC(data = results, burn = 0.5)
pbrn <- getPostBurnin(data = results, burn = 0.5)
sigResults <- HPDcalc(empPostburnin = pbrn,polyploidy = F,nsim = 100,plot = F)
dat$sim[i] <- files[i]
dat$sigFission[i] <- sigResults$sigFission
dat$sigFusion[i] <- sigResults$sigFusion
dat$sigAneuploidy[i] <- sigResults$sigAneuploidy
rm(results, pbrn, sigResults)
}
dat$tips <- rep(rep(c(100,200,50), each = 4), 3)
dat$rr <- rep(c(1,10,2,5),9)
dat$cond <- rep(c(1,2,3), each = 12)
dat <- dat[order(dat$tips),]
par(mfrow = c(3,3))
for(i in 1:3){
plot(x = NULL,
y = NULL,
xlab = "Number of tips",
ylab = "Proportion of significant results",
xlim = c(50,200),
ylim = c(0,1))
lines(x = dat$tips[dat$cond == i & dat$rr == 1], y = dat$sigFission[dat$cond == i & dat$rr == 1],type = "o",col = "gray", pch = 16)
lines(x = dat$tips[dat$cond == i & dat$rr == 2], y = dat$sigFission[dat$cond == i & dat$rr == 2],type = "o",col = "#e66101", pch = 16)
lines(x = dat$tips[dat$cond == i & dat$rr == 5], y = dat$sigFission[dat$cond == i & dat$rr == 5],type = "o",col = "#fdb863", pch = 16)
lines(x = dat$tips[dat$cond == i & dat$rr == 10], y = dat$sigFission[dat$cond == i & dat$rr == 10],type = "o",col = "#5e3c99", pch = 16)
mtext(text = paste("Condition", i),side = 3,adj = 0,
cex = 0.7)
mtext(text = "Fission",side = 3,adj = 1,
cex = 0.7)
# if(i == 1){
# # # add legend
# legend("topleft",inset=.02,
#        legend=c("1",
#                 "2",
#                 "5",
#                 "10"),
#        col=c("gray","#e66101" ,"#fdb863" ,"#5e3c99"),
#        lty=1,
#        cex=1,
#        lwd = 2,title = "Rates ratio")
# }
plot(x = NULL,
y = NULL,
xlab = "Number of tips",
ylab = "Proportion of significant results",
xlim = c(50,200),
ylim = c(0,1))
lines(x = dat$tips[dat$cond == i & dat$rr == 1], y = dat$sigFusion[dat$cond == i & dat$rr == 1],type = "o", col = "gray", pch = 16)
lines(x = dat$tips[dat$cond == i & dat$rr == 2], y = dat$sigFusion[dat$cond == i & dat$rr == 2],type = "o", col = "#e66101", pch = 16)
lines(x = dat$tips[dat$cond == i & dat$rr == 5], y = dat$sigFusion[dat$cond == i & dat$rr == 5],type = "o", col = "#fdb863", pch = 16)
lines(x = dat$tips[dat$cond == i & dat$rr == 10], y = dat$sigFusion[dat$cond == i & dat$rr == 10],type = "o", col = "#5e3c99", pch = 16)
mtext(text = "Fusion",side = 3,adj = 1,
cex = 0.7)
plot(x = NULL,
y = NULL,
xlab = "Number of tips",
ylab = "Proportion of significant results",
xlim = c(50,200),
ylim = c(0,1))
lines(x = dat$tips[dat$cond == i & dat$rr == 1], y = dat$sigAneuploidy[dat$cond == i & dat$rr == 1],type = "o",col = "gray", pch = 16)
lines(x = dat$tips[dat$cond == i & dat$rr == 2], y = dat$sigAneuploidy[dat$cond == i & dat$rr == 2],type = "o",col = "#e66101", pch = 16)
lines(x = dat$tips[dat$cond == i & dat$rr == 5], y = dat$sigAneuploidy[dat$cond == i & dat$rr == 5],type = "o", col = "#fdb863", pch = 16)
lines(x = dat$tips[dat$cond == i & dat$rr == 10], y = dat$sigAneuploidy[dat$cond == i & dat$rr == 10],type = "o",col = "#5e3c99", pch = 16)
mtext(text = "Aneuploidy",side = 3,adj = 1,
cex = 0.7)
}
dat
dat$tips <- c(100,100,100,50,50,50,50)
dat$rr <- c(1,2,5,1,10,2,5)
dat$cond <- c(1,1,1,1,1,1,1)
dat <- dat[order(dat$tips),]
par(mfrow = c(3,3))
for(i in 1:3){
plot(x = NULL,
y = NULL,
xlab = "Number of tips",
ylab = "Proportion of significant results",
xlim = c(50,200),
ylim = c(0,1))
lines(x = dat$tips[dat$cond == i & dat$rr == 1], y = dat$sigFission[dat$cond == i & dat$rr == 1],type = "o",col = "gray", pch = 16)
lines(x = dat$tips[dat$cond == i & dat$rr == 2], y = dat$sigFission[dat$cond == i & dat$rr == 2],type = "o",col = "#e66101", pch = 16)
lines(x = dat$tips[dat$cond == i & dat$rr == 5], y = dat$sigFission[dat$cond == i & dat$rr == 5],type = "o",col = "#fdb863", pch = 16)
lines(x = dat$tips[dat$cond == i & dat$rr == 10], y = dat$sigFission[dat$cond == i & dat$rr == 10],type = "o",col = "#5e3c99", pch = 16)
mtext(text = paste("Condition", i),side = 3,adj = 0,
cex = 0.7)
mtext(text = "Fission",side = 3,adj = 1,
cex = 0.7)
# if(i == 1){
# # # add legend
# legend("topleft",inset=.02,
#        legend=c("1",
#                 "2",
#                 "5",
#                 "10"),
#        col=c("gray","#e66101" ,"#fdb863" ,"#5e3c99"),
#        lty=1,
#        cex=1,
#        lwd = 2,title = "Rates ratio")
# }
plot(x = NULL,
y = NULL,
xlab = "Number of tips",
ylab = "Proportion of significant results",
xlim = c(50,200),
ylim = c(0,1))
lines(x = dat$tips[dat$cond == i & dat$rr == 1], y = dat$sigFusion[dat$cond == i & dat$rr == 1],type = "o", col = "gray", pch = 16)
lines(x = dat$tips[dat$cond == i & dat$rr == 2], y = dat$sigFusion[dat$cond == i & dat$rr == 2],type = "o", col = "#e66101", pch = 16)
lines(x = dat$tips[dat$cond == i & dat$rr == 5], y = dat$sigFusion[dat$cond == i & dat$rr == 5],type = "o", col = "#fdb863", pch = 16)
lines(x = dat$tips[dat$cond == i & dat$rr == 10], y = dat$sigFusion[dat$cond == i & dat$rr == 10],type = "o", col = "#5e3c99", pch = 16)
mtext(text = "Fusion",side = 3,adj = 1,
cex = 0.7)
plot(x = NULL,
y = NULL,
xlab = "Number of tips",
ylab = "Proportion of significant results",
xlim = c(50,200),
ylim = c(0,1))
lines(x = dat$tips[dat$cond == i & dat$rr == 1], y = dat$sigAneuploidy[dat$cond == i & dat$rr == 1],type = "o",col = "gray", pch = 16)
lines(x = dat$tips[dat$cond == i & dat$rr == 2], y = dat$sigAneuploidy[dat$cond == i & dat$rr == 2],type = "o",col = "#e66101", pch = 16)
lines(x = dat$tips[dat$cond == i & dat$rr == 5], y = dat$sigAneuploidy[dat$cond == i & dat$rr == 5],type = "o", col = "#fdb863", pch = 16)
lines(x = dat$tips[dat$cond == i & dat$rr == 10], y = dat$sigAneuploidy[dat$cond == i & dat$rr == 10],type = "o",col = "#5e3c99", pch = 16)
mtext(text = "Aneuploidy",side = 3,adj = 1,
cex = 0.7)
}
# Terrence Sylvester
# pradakshanas@gmail.com
# January 25th 2022
# load libraries
library(chromePlus)
library(diversitree)
library(doSNOW)
# get helper functions
source("functions.R")
# load data
load("simData.RData")
# define number of clusters for parallel computing
NumberOfClusters <- 100
cl <- makeCluster(NumberOfClusters, outfile = "")
registerDoSNOW(cl)
for(i in 1:length(simDat)){ # access conditions
for(ii in 1:length(simDat[[1]][[1]])){ # access ntips
for(iii in 1:length(simDat[[1]][[1]][[1]])){ # access rr
# make an object to store results
results <- NULL
results <- vector(mode = "list", length = 100)
file.name <- NULL
cond <- ntips <- rr <-  NULL
cond <- names(simDat)[i]
ntips <- names(simDat[[cond]][[1]])[ii]
rr <- names(simDat[[cond]][[1]][[ntips]])[iii]
file.name <- paste(cond,
ntips,
rr,
sep = ".")
results <- foreach(iiii = 1:100, .verbose = T, .packages = c("ape","diversitree", "chromePlus")) %dopar% {
print(paste("tree", iiii))
results[[iiii]] <-  runMCMC(tree = trees$nTips50[[iiii]],
chroms = simDat[[i]][[1]][[ii]][[iii]][[iiii]],
binary = simDat[[i]][[2]][[ii]][[iii]][[iiii]],
hyper = T,
polyploidy = F,
verbose = F,
oneway = F,
drop.poly = T,
drop.demi = T,
iter.temp = 20,
iter = 100,
prior = make.prior.exponential(r = .5),
print.every=20)
}
print(paste(file.name, "complete"))
save(results, file = paste(file.name,"RData", sep = "."))
}
}
}
# stop the cluster
stopCluster(cl)
length(simDat)
length(simDat)
trees[[ii]]
trees[[ii]][[iiii]]
# Terrence Sylvester
# pradakshanas@gmail.com
# January 25th 2022
# load libraries
library(chromePlus)
library(diversitree)
library(doSNOW)
# get helper functions
source("functions.R")
# load data
load("simData.RData")
# define number of clusters for parallel computing
NumberOfClusters <- 100
cl <- makeCluster(NumberOfClusters, outfile = "")
registerDoSNOW(cl)
for(i in 1:length(simDat)){ # access conditions
for(ii in 1:length(simDat[[1]][[1]])){ # access ntips
for(iii in 1:length(simDat[[1]][[1]][[1]])){ # access rr
# make an object to store results
results <- NULL
results <- vector(mode = "list", length = 100)
file.name <- NULL
cond <- ntips <- rr <-  NULL
cond <- names(simDat)[i]
ntips <- names(simDat[[cond]][[1]])[ii]
rr <- names(simDat[[cond]][[1]][[ntips]])[iii]
file.name <- paste(cond,
ntips,
rr,
sep = ".")
results <- foreach(iiii = 1:100, .verbose = T, .packages = c("ape","diversitree", "chromePlus")) %dopar% {
print(paste("tree", iiii))
results[[iiii]] <-  runMCMC(tree = trees[[ii]][[iiii]],
chroms = simDat[[i]][[1]][[ii]][[iii]][[iiii]],
binary = simDat[[i]][[2]][[ii]][[iii]][[iiii]],
hyper = T,
polyploidy = F,
verbose = F,
oneway = F,
drop.poly = T,
drop.demi = T,
iter.temp = 20,
iter = 100,
prior = make.prior.exponential(r = .5),
print.every=20)
}
print(paste(file.name, "complete"))
save(results, file = paste(file.name,"RData", sep = "."))
}
}
}
# stop the cluster
stopCluster(cl)
library(coda)
source("functions.R")
files <- dir()
files <- files[grep("cond", files)]
dat <- as.data.frame(matrix(data = NA,
nrow = length(files),
ncol = 4))
colnames(dat) <- c("sim", "sigFission", "sigFusion", "sigAneuploidy")
for(i in 1:length(files)){
load(files[i])
plotlikMCMC(data = results, burn = 0.5)
pbrn <- getPostBurnin(data = results, burn = 0.5)
sigResults <- HPDcalc(empPostburnin = pbrn,polyploidy = F,nsim = 100,plot = F)
dat$sim[i] <- files[i]
dat$sigFission[i] <- sigResults$sigFission
dat$sigFusion[i] <- sigResults$sigFusion
dat$sigAneuploidy[i] <- sigResults$sigAneuploidy
rm(results, pbrn, sigResults)
}
dat$tips <- rep(rep(c(100,200,50), each = 4), 3)
dat$rr <- rep(c(1,10,2,5),9)
dat$cond <- rep(c(1,2,3), each = 12)
dat <- dat[order(dat$tips),]
par(mfrow = c(3,3))
for(i in 1:3){
plot(x = NULL,
y = NULL,
xlab = "Number of tips",
ylab = "Proportion of significant results",
xlim = c(50,200),
ylim = c(0,1))
lines(x = dat$tips[dat$cond == i & dat$rr == 1], y = dat$sigFission[dat$cond == i & dat$rr == 1],type = "o",col = "gray", pch = 16)
lines(x = dat$tips[dat$cond == i & dat$rr == 2], y = dat$sigFission[dat$cond == i & dat$rr == 2],type = "o",col = "#e66101", pch = 16)
lines(x = dat$tips[dat$cond == i & dat$rr == 5], y = dat$sigFission[dat$cond == i & dat$rr == 5],type = "o",col = "#fdb863", pch = 16)
lines(x = dat$tips[dat$cond == i & dat$rr == 10], y = dat$sigFission[dat$cond == i & dat$rr == 10],type = "o",col = "#5e3c99", pch = 16)
mtext(text = paste("Condition", i),side = 3,adj = 0,
cex = 0.7)
mtext(text = "Fission",side = 3,adj = 1,
cex = 0.7)
# if(i == 1){
# # # add legend
# legend("topleft",inset=.02,
#        legend=c("1",
#                 "2",
#                 "5",
#                 "10"),
#        col=c("gray","#e66101" ,"#fdb863" ,"#5e3c99"),
#        lty=1,
#        cex=1,
#        lwd = 2,title = "Rates ratio")
# }
plot(x = NULL,
y = NULL,
xlab = "Number of tips",
ylab = "Proportion of significant results",
xlim = c(50,200),
ylim = c(0,1))
lines(x = dat$tips[dat$cond == i & dat$rr == 1], y = dat$sigFusion[dat$cond == i & dat$rr == 1],type = "o", col = "gray", pch = 16)
lines(x = dat$tips[dat$cond == i & dat$rr == 2], y = dat$sigFusion[dat$cond == i & dat$rr == 2],type = "o", col = "#e66101", pch = 16)
lines(x = dat$tips[dat$cond == i & dat$rr == 5], y = dat$sigFusion[dat$cond == i & dat$rr == 5],type = "o", col = "#fdb863", pch = 16)
lines(x = dat$tips[dat$cond == i & dat$rr == 10], y = dat$sigFusion[dat$cond == i & dat$rr == 10],type = "o", col = "#5e3c99", pch = 16)
mtext(text = "Fusion",side = 3,adj = 1,
cex = 0.7)
plot(x = NULL,
y = NULL,
xlab = "Number of tips",
ylab = "Proportion of significant results",
xlim = c(50,200),
ylim = c(0,1))
lines(x = dat$tips[dat$cond == i & dat$rr == 1], y = dat$sigAneuploidy[dat$cond == i & dat$rr == 1],type = "o",col = "gray", pch = 16)
lines(x = dat$tips[dat$cond == i & dat$rr == 2], y = dat$sigAneuploidy[dat$cond == i & dat$rr == 2],type = "o",col = "#e66101", pch = 16)
lines(x = dat$tips[dat$cond == i & dat$rr == 5], y = dat$sigAneuploidy[dat$cond == i & dat$rr == 5],type = "o", col = "#fdb863", pch = 16)
lines(x = dat$tips[dat$cond == i & dat$rr == 10], y = dat$sigAneuploidy[dat$cond == i & dat$rr == 10],type = "o",col = "#5e3c99", pch = 16)
mtext(text = "Aneuploidy",side = 3,adj = 1,
cex = 0.7)
}
library(phytools)
library(diversitree)
library(chromePlus)
source("functions.R")
load("simData.RData")
# get the transistion matrix
tmat <- matrix(data = 0, nrow = 2, ncol = 2)
colnames(tmat) <- rownames(tmat) <- c(0,1)
# fill tmat
tmat[1,2] <- mean(pbrn$tran12[1:50])
# load libraries
library(phytools)
library(diversitree)
library(chromePlus)
# load helper functions
source("functions.R")
# load data
load("simData.RData")
# get post burnin of emperical data
pbrn <- getPostBurnin(results, burn = 0.5)
# get the transistion matrix
tmat <- matrix(data = 0, nrow = 2, ncol = 2)
colnames(tmat) <- rownames(tmat) <- c(0,1)
load("cond.1.nTips50.rr1.RData")
# get post burnin of emperical data
pbrn <- getPostBurnin(results, burn = 0.5)
# get the transistion matrix
tmat <- matrix(data = 0, nrow = 2, ncol = 2)
colnames(tmat) <- rownames(tmat) <- c(0,1)
# fill tmat
tmat[1,2] <- mean(pbrn$tran12[1:50])
tmat[2,1] <- mean(pbrn$tran21[1:50])
diag(tmat) <- -rowSums(tmat)
# run MCMC
res <- simBinMCMC(tree = trees$nTips50[[1]],
chroms = simDat$cond.1$chroms$nTips50$rr1$tree1,
binary = simDat$cond.1$binary$nTips50$rr1$tree1,tmat = tmat,
nsim = 10,
hyper = T,
polyploidy = F,
verbose = F,
oneway = F,
drop.poly = T,
drop.demi = T,
iter.temp = 20,
iter = 100)
#Plot MCMC
plotlikMCMC(res,0.5)
# get post burnin of MCMC
simpb <-  getPostBurnin(res, 0.5)
# calculate emperical P
empiricalPcalc(empPostburnin = pbrn[1:50,],
simPostburnin = simpb,
polyploidy = F,
nsim = 10,
plot = T)
# load helper functions
source("functions.R")
# calculate emperical P
empiricalPcalc(empPostburnin = pbrn[1:50,],
simPostburnin = simpb,
polyploidy = F,
nsim = 10,
plot = T)
# load helper functions
source("functions.R")
# calculate emperical P
empiricalPcalc(empPostburnin = pbrn[1:50,],
simPostburnin = simpb,
polyploidy = F,
nsim = 10,
plot = T)
save.image("~/GitHub/lepidoptera/analysis/rscripts/sim/rscrips/test.empP.RData")
# load libraries
library(phytools)
library(diversitree)
library(chromePlus)
# load helper functions
source("functions.R")
# load data
load("simData.RData")
load("cond.1.nTips50.rr10.RData")
# get post burnin of emperical data
pbrn <- getPostBurnin(results, burn = 0.5)
# get the transistion matrix
tmat <- matrix(data = 0, nrow = 2, ncol = 2)
colnames(tmat) <- rownames(tmat) <- c(0,1)
# fill tmat
tmat[1,2] <- mean(pbrn$tran12[1:50])
tmat[2,1] <- mean(pbrn$tran21[1:50])
diag(tmat) <- -rowSums(tmat)
# run MCMC
res <- simBinMCMC(tree = trees$nTips50[[1]],
chroms = simDat$cond.1$chroms$nTips50$rr1$tree1,
binary = simDat$cond.1$binary$nTips50$rr1$tree1,tmat = tmat,
nsim = 10,
hyper = T,
polyploidy = F,
verbose = F,
oneway = F,
drop.poly = T,
drop.demi = T,
iter.temp = 20,
iter = 100)
#Plot MCMC
plotlikMCMC(res,0.5)
# get post burnin of MCMC
simpb <-  getPostBurnin(res, 0.5)
# calculate emperical P
empiricalPcalc(empPostburnin = pbrn[1:50,],
simPostburnin = simpb,
polyploidy = F,
nsim = 10,
plot = T)
# calculate emperical P
empP <- empiricalPcalc(empPostburnin = pbrn[1:50,],
simPostburnin = simpb,
polyploidy = F,
nsim = 10,
plot = T)
# calculate emperical P
empP <- empiricalPcalc(empPostburnin = pbrn[1:50,],
simPostburnin = simpb,
polyploidy = F,
nsim = 10,
plot = F)
# load libraries
library(phytools)
library(diversitree)
library(chromePlus)
# load helper functions
source("functions.R")
# load data
load("simData.RData")
load("cond.1.nTips50.rr1.RData")
# get post burnin of emperical data
pbrn <- getPostBurnin(results, burn = 0.5)
# get the transistion matrix
tmat <- matrix(data = 0, nrow = 2, ncol = 2)
colnames(tmat) <- rownames(tmat) <- c(0,1)
# fill tmat
tmat[1,2] <- mean(pbrn$tran12[1:50])
tmat[2,1] <- mean(pbrn$tran21[1:50])
diag(tmat) <- -rowSums(tmat)
# run MCMC
# run MCMC
res <- simBinMCMC(tree = trees$nTips50[[1]],
chroms = simDat$cond.1$chroms$nTips50$rr1$tree1,
binary = simDat$cond.1$binary$nTips50$rr1$tree1,tmat = tmat,
nsim = 100,
hyper = T,
polyploidy = F,
verbose = F,
oneway = F,
drop.poly = T,
drop.demi = T,
iter.temp = 20,
iter = 100)
load("~/GitHub/lepidoptera/analysis/rscripts/sim/rscrips/test.empP.RData")
# calculate emperical P
empiricalPcalc(empPostburnin = pbrn[1:50,],
simPostburnin = simpb,
polyploidy = F,
nsim = 10,
plot = T)
library(diversitree)
library(chromePlus)
library(phytools)
?make.mkn
?constrainMkn
