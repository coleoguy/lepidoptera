pch = 16,
cex = 1,
col = c("black", "gray"))
# add text
text(x = rep(-100, 2),
y = c(91,86),
labels = c("Generalist species", "Specialist species"),
pos = 4,
cex = .8)
# number of state changes
count <- describe.simmap(simmap.MCMC)$count
# mean transition rates between states
#from generalist to specialist
mean(count[,2])
# from specialist to generalist
mean(count[,3])
# Terrence Sylvester
# 13 October 202
# pradakshanas@g,ail.com
# load libraries
library(phytools)
library(viridis)
# load data
load("../results/stoch.mapping-rates-from-MCMC.RData")
# plot the posterior probability of
DensMap <- densityMap(trees = simmap.MCMC[1:100],
res = 100,
ftype = "off",
lwd = 1.7,
legend = 50,
type = "fan",
plot = F)
# sort feeding type to match with the order of tip names
feedingType.sorted <- vector(mode = "numeric", length = 441)
for(i in 1:441){
feedingType.sorted[i] <- host.new$type[host.new$binomial == phy[[1]]$tip.label[i]]
names(feedingType.sorted)[i] <- phy[[1]]$tip.label[i]
}
plot(DensMap,
res = 100,
ftype = "off",
lwd = 1.7,
legend = F,
type = "fan")
# legend
add.color.bar(50,
DensMap$cols,
title="Posterior\nporbability (state = 1)",
lims= c(0,1),
digits=3,
prompt=FALSE,
x=-100, # this is the possition where legend starts. We chose this
# by using the locator function in R
y=-91,
lwd=4,
fsize=.7,
subtitle="")
# fix offset
.PlotPhyloEnv$last_plot.phylo$align.tip.label <- T
tiplabels(pch = 16,
cex = .5,
col = c("black", "gray")[feedingType.sorted + 1],
offset = 1.5)
# plot legend for tip lables
points(x = rep(-100, 2),
y = c(91,86),
pch = 16,
cex = 1,
col = c("black", "gray"))
# add text
text(x = rep(-100, 2),
y = c(91,86),
labels = c("Generalist species", "Specialist species"),
pos = 4,
cex = .8)
# number of state changes
count <- describe.simmap(simmap.MCMC)$count
# mean transition rates between states
#from generalist to specialist
mean(count[,2])
# from specialist to generalist
mean(count[,3])
simmap.MCMC[[1]]
plot(simmap.MCMC[[1]])
# load libraries
library(coda)
# load post burnin from the mcmc
pb.mcmc <- read.csv("../results/w.poly.all.matches.post.burnin.csv", as.is = T)
state.01.rates <- pb.mcmc$asc1 + pb.mcmc$desc1 + pb.mcmc$pol1
state.02.rates <- pb.mcmc$asc2 + pb.mcmc$desc2 + pb.mcmc$pol2
# compare these rates
state.01.density <- density(state.01.rates)
state.02.density <- density(state.02.rates)
state.02.HPD <- HPDinterval(as.mcmc(state.02.rates))
# plot
plot(state.01.density)
# compare these rates
rate.diff <- state.01.rates - state.02.rates
# compare these rates
rate.diff <- state.01.rates - state.02.rates
# density for plotting
rate.density <- density(rate.diff)
# HPD interval
rate.HPD <- HPDinterval(as.mcmc(rate.diff))
# plot
plot(rate.density)
# plot
plot(rate.density,
xlim = c(0,1),
ylim = c(-1,10))
polygon(rate.density)
polygon(rate.density,
col = "blue")
# plot
plot(rate.density,
xlim = c(0,1),
ylim = c(-1,10))
polygon(rate.density,
col = rgb(0,0,1,.5))
# plot
plot(rate.density,
xlim = c(0,1),
ylim = c(-1,10))
polygon(rate.density,
col = rgb(0,0,1,.5),border = NA)
segments(x0 = rate.HPD[1],
x1 = rate.HPD[2],
y0 = -1,
y1 = -1)
segments(x0 = rate.HPD[1],
x1 = rate.HPD[2],
y0 = -.5,
y1 = -.5,lwd = 3)
# plot
plot(rate.density,
xlim = c(0,1),
ylim = c(-1,10))
polygon(rate.density,
col = rgb(0,0,1,.2))
segments(x0 = rate.HPD[1],
x1 = rate.HPD[2],
y0 = -.5,
y1 = -.5,
lwd = 3,
col = )
# plot
plot(rate.density,
xlim = c(0,1),
ylim = c(-1,10))
polygon(rate.density,
col = rgb(0,0,.5,.2))
polygon(rate.density,
col = rgb(134,197,218,.8,maxColorValue = 255))
# plot
plot(rate.density,
xlim = c(0,1),
ylim = c(-1,10))
polygon(rate.density,
col = rgb(134,197,218,.8,maxColorValue = 255))
polygon(rate.density,
col = rgb(0,0,1,.8))
# plot
plot(rate.density,
xlim = c(0,1),
ylim = c(-1,10))
polygon(rate.density,
col = rgb(0,0,1,.4))
segments(x0 = rate.HPD[1],
x1 = rate.HPD[2],
y0 = -.5,
y1 = -.5,
lwd = 3,
col = "Blue")
abline(v = 0,
col = "red",
lty = 2)
# plot
plot(rate.density,
xlim = c(0,1),
ylim = c(-1,10),
xlab = expression(paste("| ",Delta, "R"[All]," |", "(MYA)")))
# plot
plot(rate.density,
xlim = c(0,1),
ylim = c(-1,10),
xlab = expression(paste(Delta, "R"[All], " (MYA)")))
# plot
plot(rate.density,
xlim = c(0,1),
ylim = c(-1,10),
xlab = expression(paste(Delta, "R"[All], " (MYA)")),
main = "")
polygon(rate.density,
col = rgb(0,0,1,.4))
segments(x0 = rate.HPD[1],
x1 = rate.HPD[2],
y0 = -.5,
y1 = -.5,
lwd = 3,
col = "Blue")
abline(v = 0,
col = "red",
lty = 2)
# load post burnin from the mcmc and from model test
pb.model.test <- read.csv("../results/model.test.post.burnin.csv", as.is = T)
model.state.01.rates <- pb.model.test$asc1 + pb.model.test$desc1 + pb.model.test$pol1
model.state.02.rates <- pb.model.test$asc2 + pb.model.test$desc2 + pb.model.test$pol2
model.rate.diff <- abs(model.state.01.rates - model.state.02.rates)
model.rate.density <- density(model.rate.diff)
model.rate.HPD <- HPDinterval(as.mcmc(model.rate.diff))
polygon(model.rate.density,
col = rgb(0,0,1,.4))
# plot
plot(X = NULL,
y = NULL,
xlim = c(0,1),
ylim = c(-1,10),
xlab = expression(paste(Delta, "R"[All-eperical], " (MYA)"), " vs", Delta, "R"[All-simulated], " (MYA)")),
main = "")
# plot
plot(X = NULL,
y = NULL,
xlim = c(0,1),
ylim = c(-1,10),
xlab = expression(paste(Delta, "R"[All-eperical], " (MYA)", " vs", Delta, "R"[All-simulated], " (MYA)")),
main = "")
# plot
plot(X = NULL,
y = NULL,
xlim = c(0,1),
ylim = c(-1,10),
xlab = expression(paste(Delta, "R"[All-eperical], " (MYA)")),
main = "")
# plot
plot(X = NULL,
y = NULL,
xlim = c(0,1),
ylim = c(-1,10),
xlab = "",
main = "")
# make an empty canvas
plot(x = NULL,
y = NULL,
xlim = c(0, .4),
ylim = c(-6,70),
xlab = "Difference of the rates of \nchromosome number evolution (MYA)",
ylab = "Density")
# plot
plot(x = NULL,
y = NULL,
xlim = c(0,1),
ylim = c(-1,10),
xlab = expression(paste(Delta, "R"[All-eperical], " (MYA)", " vs", Delta, "R"[All-simulated], " (MYA)")),
main = "")
# plot
plot(x = NULL,
y = NULL,
xlim = c(0,1),
ylim = c(-1,10),
xlab = expression(paste(Delta, "R"[All-eperical], " (MYA)", " vs ", Delta, "R"[All-simulated], " (MYA)")),
main = "")
# plot
plot(x = NULL,
y = NULL,
xlim = c(0,1),
ylim = c(-1,10),
xlab = expression(paste(Delta, "R"[All-eperical], " vs. ", Delta, "R"[All-simulated], " (MYA)")),
main = "")
polygon(rate.density,
col = rgb(0,0,1,.4))
polygon(model.rate.density,
col = rgb(1,0,1,.4))
# plot
plot(x = NULL,
y = NULL,
xlim = c(0,1),
ylim = c(-1,10),
xlab = expression(paste(Delta, "R"[All-eperical], " vs. ", Delta, "R"[All-simulated], " (MYA)")),
main = "")
polygon(rate.density,
col = rgb(0,0,1,.5))
polygon(model.rate.density,
col = rgb(1,0,1,.5))
polygon(model.rate.density,
col = rgb(1,0,0,.5))
# plot
plot(x = NULL,
y = NULL,
xlim = c(0,1),
ylim = c(-1,10),
xlab = expression(paste(Delta, "R"[All-eperical], " vs. ", Delta, "R"[All-simulated], " (MYA)")),
main = "")
polygon(rate.density,
col = rgb(0,0,1,.5))
polygon(model.rate.density,
col = rgb(1,0,0,.5))
segments(x0 = rate.HPD[1],
x1 = rate.HPD[2],
y0 = -.5,
y1 = -.5,
lwd = 3,
col = "Blue")
segments(x0 = model.rate.HPD[1],
x1 = model.rate.HPD[2],
y0 = -.5,
y1 = -.5,
lwd = 3,
col = "Blue")
segments(x0 = model.rate.HPD[1],
x1 = model.rate.HPD[2],
y0 = -.1,
y1 = -.1,
lwd = 3,
col = "Red")
segments(x0 = model.rate.HPD[1],
x1 = model.rate.HPD[2],
y0 = -1,
y1 = -1,
lwd = 3,
col = "Red")
abline(v = 0,
col = "red",
lty = 2)
# load post burnin from the mcmc and from model test
pb.simulated.test <- read.csv("../results/simulated.test.post.burnin.csv", as.is = T)
pb.mcmc <- read.csv("../results/w.poly.all.matches.post.burnin.csv", as.is = T)
# load post burnin from the mcmc and from model test
pb.simulated.test <- read.csv("../results/model.test.post.burnin.csv", as.is = T)
pb.mcmc <- read.csv("../results/w.poly.all.matches.post.burnin.csv", as.is = T)
# get the sum of all rates at each state
emperical.state.01.rates <- pb.mcmc$asc1 + pb.mcmc$desc1 + pb.mcmc$pol1
emperical.state.02.rates <- pb.mcmc$asc2 + pb.mcmc$desc2 + pb.mcmc$pol2
simulated.state.01.rates <- pb.simulated.test$asc1 + pb.simulated.test$desc1 + pb.simulated.test$pol1
simulated.state.02.rates <- pb.simulated.test$asc2 + pb.simulated.test$desc2 + pb.simulated.test$pol2
# compare these rates
emperical.rate.diff <- emperical.state.01.rates - emperical.state.02.rates
simulated.rate.diff <- abs(simulated.state.01.rates - simulated.state.02.rates)
# density for plotting
emperical.rate.density <- density(emperical.rate.diff)
simulated.rate.density <- density(simulated.rate.diff)
# HPD interval
emperical.rate.HPD <- HPDinterval(as.mcmc(emperical.rate.diff))
simulated.rate.HPD <- HPDinterval(as.mcmc(simulated.rate.diff))
# plot
plot(x = NULL,
y = NULL,
xlim = c(0,1),
ylim = c(-1,10),
xlab = expression(paste(Delta, "R"[All-eperical], " vs. ", Delta, "R"[All-simulated], " (MYA)")),
main = "")
polygon(emperical.rate.density,
col = rgb(0,0,1,.5))
polygon(simulated.rate.density,
col = rgb(1,0,0,.5))
segments(x0 = emperical.rate.HPD[1],
x1 = emperical.rate.HPD[2],
y0 = -.5,
y1 = -.5,
lwd = 3,
col = "Blue")
segments(x0 = simulated.rate.HPD[1],
x1 = simulated.rate.HPD[2],
y0 = -1,
y1 = -1,
lwd = 3,
col = "Red")
abline(v = 0,
col = "red",
lty = 2)
# legend
points(x = rep(0.8, 3),
y = c(10,9),
pch = 22,
bg = c(rgb(1,0,0,.5),
rgb(0,0,1,.5)),
col = "black")
# legend
points(x = rep(0.8, 2),
y = c(10,9),
pch = 22,
bg = c(rgb(1,0,0,.5),
rgb(0,0,1,.5)),
col = "black")
# legend
points(x = rep(0.8, 2),
y = c(10,9),
pch = 22,
bg = c(rgb(1,0,0,.5),
rgb(0,0,1,.5)),
col = "black",
pch = 3)
# legend
points(x = rep(0.8, 2),
y = c(10,9),
pch = 22,
bg = c(rgb(1,0,0,.5),
rgb(0,0,1,.5)),
col = "black",
cex = 3)
# legend
points(x = rep(0.8, 2),
y = c(10,9),
pch = 22,
bg = c(rgb(1,0,0,.5),
rgb(0,0,1,.5)),
col = "black",
cex = 2)
# text
text(x = rep(0.8, 2),
y = c(10,9),
labels = c("Emperical dataset", "Simulated dataset"),
pos = 4,
cex = .9)
# plot
plot(x = NULL,
y = NULL,
xlim = c(0,1),
ylim = c(-1,10),
xlab = expression(paste(Delta, "R"[All-eperical], " vs. ", Delta, "R"[All-simulated], " (MYA)")),
main = "")
polygon(emperical.rate.density,
col = rgb(0,0,1,.5))
polygon(simulated.rate.density,
col = rgb(1,0,0,.5))
segments(x0 = emperical.rate.HPD[1],
x1 = emperical.rate.HPD[2],
y0 = -.5,
y1 = -.5,
lwd = 3,
col = "Blue")
segments(x0 = simulated.rate.HPD[1],
x1 = simulated.rate.HPD[2],
y0 = -1,
y1 = -1,
lwd = 3,
col = "Red")
abline(v = 0,
col = "red",
lty = 2)
# legend
points(x = rep(0.8, 2),
y = c(10,9),
pch = 22,
bg = c(rgb(1,0,0,.5),
rgb(0,0,1,.5)),
col = "black",
cex = 2)
# text
text(x = rep(0.8, 2),
y = c(10,9),
labels = c("Emperical dataset", "Simulated dataset"),
pos = 4,
cex = .9)
# load libraries
library(coda)
# load post burnin from the mcmc and from model test
pb.simulated.test <- read.csv("../results/model.test.post.burnin.csv", as.is = T)
pb.mcmc <- read.csv("../results/w.poly.all.matches.post.burnin.csv", as.is = T)
# get the sum of all rates at each state
emperical.state.01.rates <- pb.mcmc$asc1 + pb.mcmc$desc1 + pb.mcmc$pol1
emperical.state.02.rates <- pb.mcmc$asc2 + pb.mcmc$desc2 + pb.mcmc$pol2
simulated.state.01.rates <- pb.simulated.test$asc1 + pb.simulated.test$desc1 + pb.simulated.test$pol1
simulated.state.02.rates <- pb.simulated.test$asc2 + pb.simulated.test$desc2 + pb.simulated.test$pol2
# compare these rates
emperical.rate.diff <- emperical.state.01.rates - emperical.state.02.rates
simulated.rate.diff <- abs(simulated.state.01.rates - simulated.state.02.rates)
# density for plotting
emperical.rate.density <- density(emperical.rate.diff)
simulated.rate.density <- density(simulated.rate.diff)
# HPD interval
emperical.rate.HPD <- HPDinterval(as.mcmc(emperical.rate.diff))
simulated.rate.HPD <- HPDinterval(as.mcmc(simulated.rate.diff))
# plot
plot(x = NULL,
y = NULL,
xlim = c(0,1),
ylim = c(-1,10),
xlab = expression(paste(Delta, "R"[All-eperical], " vs. ", Delta, "R"[All-simulated], " (MYA)")),
main = "")
polygon(emperical.rate.density,
col = rgb(0,0,1,.5))
polygon(simulated.rate.density,
col = rgb(1,0,0,.5))
segments(x0 = emperical.rate.HPD[1],
x1 = emperical.rate.HPD[2],
y0 = -.5,
y1 = -.5,
lwd = 3,
col = "Blue")
segments(x0 = simulated.rate.HPD[1],
x1 = simulated.rate.HPD[2],
y0 = -1,
y1 = -1,
lwd = 3,
col = "Red")
abline(v = 0,
col = "red",
lty = 2)
# legend
points(x = rep(0.8, 2),
y = c(10,9),
pch = 22,
bg = c(rgb(0,0,1,.5),
rgb(1,0,0,.5)),
col = "black",
cex = 2)
# text
text(x = rep(0.8, 2),
y = c(10,9),
labels = c("Emperical dataset", "Simulated dataset"),
pos = 4,
cex = .9)
