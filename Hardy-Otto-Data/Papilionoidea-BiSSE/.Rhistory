trees <- read.tree('papilionoidea-10.trees')
library(diversitree)
library(geiger)
trees <- read.tree('papilionoidea-10.trees')
trees[[1]]
trees <- read.tree('Heliconiini-100.tre')
d <- read.csv('papilionoidea-bisse-data.txt')
trees <- read.tree('papilionoidea-10.trees')
library(diversitree)
library(geiger)
parStack <- function(fit){
this.par <- fit$par
return(this.par)
}
likStack <- function(fit){
this.lik <- fit$lnLik
return(this.lik)
}
parMeans <- function(par.stack){
pardf <- data.frame(matrix(unlist(par.stack), nrow=10, byrow=T))
colnames(pardf) <- names(par.stack[[1]])
par.means <- colMeans(pardf)
return(par.means)
}
trees <- read.tree('papilionoidea-10.trees')
d <- read.csv('papilionoidea-bisse-data.txt')
range <- d$hosts
names(range) <- d$sp
models.full <- list()
models.l <- list()
models.m <- list()
models.r <- list()
for (i in 1:10){
print(i)
t <- trees[[i]]
#phy <- trees[[i]]
#td <- treedata(phy, range)
#t <- td$phy
lik <- make.bisse(t, range, sampling.f=c(0.083, 0.058))
p <- starting.point.bisse(t)
fit <- find.mle(lik, p)
models.full <- c(models.full, list(fit))
lik.l <- diversitree::constrain(lik, lambda1 ~ lambda0)
fit.l <- find.mle(lik.l, p[argnames(lik.l)])
models.l <- c(models.l, list(fit.l))
lik.m <- diversitree::constrain(lik, mu1 ~ mu0)
fit.m <- find.mle(lik.m, p[argnames(lik.m)])
models.m <- c(models.m, list(fit.m))
lik.r <- diversitree::constrain(lik, lambda1 ~ lambda0, mu1 ~ mu0)
fit.r <- find.mle(lik.r, p[argnames(lik.r)])
models.r <- c(models.r, list(fit.r))
}
plot(trees)
plot(trees[[1]])
plot(trees[[1]], show.tip.label = F)
